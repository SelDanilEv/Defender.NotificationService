using Defender.Common.Exceptions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Defender.NotificationService.Infrastructure.Clients.ServiceClient.Generated;

using System = System;

[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial interface ISendinBlueClient
{
    /// <summary>
    /// Return all your created email campaigns
    /// </summary>
    /// <param name="type">Filter on the type of the campaigns</param>
    /// <param name="status">Filter on the status of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body</param>
    /// <returns>Email campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailCampaigns> GetEmailCampaignsAsync(Type? type, Status? status, Statistics? statistics, DateTime? startDate, DateTime? endDate, long? limit, long? offset, bool? excludeHtmlContent);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created email campaigns
    /// </summary>
    /// <param name="type">Filter on the type of the campaigns</param>
    /// <param name="status">Filter on the status of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body</param>
    /// <returns>Email campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailCampaigns> GetEmailCampaignsAsync(Type? type, Status? status, Statistics? statistics, DateTime? startDate, DateTime? endDate, long? limit, long? offset, bool? excludeHtmlContent, CancellationToken cancellationToken);

    /// <summary>
    /// Create an email campaign
    /// </summary>
    /// <param name="emailCampaigns">Values to create a campaign</param>
    /// <returns>Email campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create an email campaign
    /// </summary>
    /// <param name="emailCampaigns">Values to create a campaign</param>
    /// <returns>Email campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns, CancellationToken cancellationToken);

    /// <summary>
    /// Get an email campaign report
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <returns>Email campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailCampaign> GetEmailCampaignAsync(long campaignId, Statistics2? statistics);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an email campaign report
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <returns>Email campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailCampaign> GetEmailCampaignAsync(long campaignId, Statistics2? statistics, CancellationToken cancellationToken);

    /// <summary>
    /// Update an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="emailCampaign">Values to update a campaign</param>
    /// <returns>Email Campaign has been updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="emailCampaign">Values to update a campaign</param>
    /// <returns>Email Campaign has been updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign, CancellationToken cancellationToken);

    /// <summary>
    /// Delete an email campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>Email campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteEmailCampaignAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an email campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>Email campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteEmailCampaignAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Send an email campaign immediately, based on campaignId
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Email campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendEmailCampaignNowAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an email campaign immediately, based on campaignId
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Email campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendEmailCampaignNowAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Send an email campaign to your test list
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestEmailAsync(long campaignId, SendTestEmail emailTo);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an email campaign to your test list
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestEmailAsync(long campaignId, SendTestEmail emailTo, CancellationToken cancellationToken);

    /// <summary>
    /// Update an email campaign status
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="status">Status of the campaign</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email campaign status
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="status">Status of the campaign</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, CancellationToken cancellationToken);

    /// <summary>
    /// Send the report of a campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendReportAsync(long campaignId, SendReport sendReport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send the report of a campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendReportAsync(long campaignId, SendReport sendReport, CancellationToken cancellationToken);

    /// <summary>
    /// Get an A/B test email campaign results
    /// </summary>
    /// <param name="campaignId">Id of the A/B test campaign</param>
    /// <returns>A/B test email campaign Result</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<AbTestCampaignResult> GetAbTestCampaignResultAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an A/B test email campaign results
    /// </summary>
    /// <param name="campaignId">Id of the A/B test campaign</param>
    /// <returns>A/B test email campaign Result</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<AbTestCampaignResult> GetAbTestCampaignResultAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Get a shared template url
    /// </summary>
    /// <param name="campaignId">Id of the campaign or template</param>
    /// <returns>Shared template URL information</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSharedTemplateUrl> GetSharedTemplateUrlAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a shared template url
    /// </summary>
    /// <param name="campaignId">Id of the campaign or template</param>
    /// <returns>Shared template URL information</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSharedTemplateUrl> GetSharedTemplateUrlAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Export the recipients of an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> EmailExportRecipientsAsync(long campaignId, EmailExportRecipients recipientExport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export the recipients of an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> EmailExportRecipientsAsync(long campaignId, EmailExportRecipients recipientExport, CancellationToken cancellationToken);

    /// <summary>
    /// Upload an image to your account's image gallery
    /// </summary>
    /// <param name="uploadImage">Parameters to upload an image</param>
    /// <returns>Image successfully uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UploadImageToGalleryAsync(UploadImageToGallery uploadImage);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Upload an image to your account's image gallery
    /// </summary>
    /// <param name="uploadImage">Parameters to upload an image</param>
    /// <returns>Image successfully uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UploadImageToGalleryAsync(UploadImageToGallery uploadImage, CancellationToken cancellationToken);

    /// <summary>
    /// Send a transactional email
    /// </summary>
    /// <param name="sendSmtpEmail">Values to send a transactional email</param>
    /// <returns>transactional email sent</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateSmtpEmail> SendTransacEmailAsync(SendSmtpEmail sendSmtpEmail);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a transactional email
    /// </summary>
    /// <param name="sendSmtpEmail">Values to send a transactional email</param>
    /// <returns>transactional email sent</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateSmtpEmail> SendTransacEmailAsync(SendSmtpEmail sendSmtpEmail, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of transactional emails on the basis of allowed filters
    /// </summary>
    /// <param name="email">Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.</param>
    /// <param name="templateId">Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.</param>
    /// <param name="messageId">Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <returns>List of transactional emails</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacEmailsList> GetTransacEmailsListAsync(string email, long? templateId, string messageId, DateTime? startDate, DateTime? endDate);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of transactional emails on the basis of allowed filters
    /// </summary>
    /// <param name="email">Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.</param>
    /// <param name="templateId">Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.</param>
    /// <param name="messageId">Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <returns>List of transactional emails</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacEmailsList> GetTransacEmailsListAsync(string email, long? templateId, string messageId, DateTime? startDate, DateTime? endDate, CancellationToken cancellationToken);

    /// <summary>
    /// Get the personalized content of a sent transactional email
    /// </summary>
    /// <param name="uuid">Unique id of the transactional email that has been sent to a particular contact</param>
    /// <returns>Transactional email content</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacEmailContent> GetTransacEmailContentAsync(string uuid);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the personalized content of a sent transactional email
    /// </summary>
    /// <param name="uuid">Unique id of the transactional email that has been sent to a particular contact</param>
    /// <returns>Transactional email content</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacEmailContent> GetTransacEmailContentAsync(string uuid, CancellationToken cancellationToken);

    /// <summary>
    /// Delete an SMTP transactional log
    /// </summary>
    /// <param name="messageId">MessageId of the transactional log to delete</param>
    /// <returns>Transactional Logs deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task LogAsync(string messageId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an SMTP transactional log
    /// </summary>
    /// <param name="messageId">MessageId of the transactional log to delete</param>
    /// <returns>Transactional Logs deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task LogAsync(string messageId, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of email templates
    /// </summary>
    /// <param name="templateStatus">Filter on the status of the template. Active = true, inactive = false</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>transactional email templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmtpTemplates> GetSmtpTemplatesAsync(bool? templateStatus, long? limit, long? offset);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of email templates
    /// </summary>
    /// <param name="templateStatus">Filter on the status of the template. Active = true, inactive = false</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>transactional email templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmtpTemplates> GetSmtpTemplatesAsync(bool? templateStatus, long? limit, long? offset, CancellationToken cancellationToken);

    /// <summary>
    /// Create an email template
    /// </summary>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateSmtpTemplateAsync(CreateSmtpTemplate smtpTemplate);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create an email template
    /// </summary>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateSmtpTemplateAsync(CreateSmtpTemplate smtpTemplate, CancellationToken cancellationToken);

    /// <summary>
    /// Returns the template information
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Email template informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmtpTemplateOverview> GetSmtpTemplateAsync(long templateId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns the template information
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Email template informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmtpTemplateOverview> GetSmtpTemplateAsync(long templateId, CancellationToken cancellationToken);

    /// <summary>
    /// Update an email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmtpTemplateAsync(long templateId, UpdateSmtpTemplate smtpTemplate);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmtpTemplateAsync(long templateId, UpdateSmtpTemplate smtpTemplate, CancellationToken cancellationToken);

    /// <summary>
    /// Delete an inactive email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Inactive transactional email template has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSmtpTemplateAsync(long templateId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an inactive email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Inactive transactional email template has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSmtpTemplateAsync(long templateId, CancellationToken cancellationToken);

    /// <summary>
    /// Send a template to your test list
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestTemplateAsync(long templateId, SendTestEmail sendTestEmail);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a template to your test list
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestTemplateAsync(long templateId, SendTestEmail sendTestEmail, CancellationToken cancellationToken);

    /// <summary>
    /// Get your transactional email activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAggregatedReport> GetAggregatedSmtpReportAsync(string startDate, string endDate, int? days, string tag);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your transactional email activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAggregatedReport> GetAggregatedSmtpReportAsync(string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken);

    /// <summary>
    /// Get your transactional email activity aggregated per day
    /// </summary>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetReports> GetSmtpReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string tag);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your transactional email activity aggregated per day
    /// </summary>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetReports> GetSmtpReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken);

    /// <summary>
    /// Get all your transactional email activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="email">Filter the report for a specific email addresses</param>
    /// <param name="event">Filter the report for a specific event type</param>
    /// <param name="tags">Filter the report for tags (serialized and urlencoded array)</param>
    /// <param name="messageId">Filter on a specific message id</param>
    /// <param name="templateId">Filter on a specific template id</param>
    /// <returns>Email events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailEventReport> GetEmailEventReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string email, Event? @event, string tags, string messageId, long? templateId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all your transactional email activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="email">Filter the report for a specific email addresses</param>
    /// <param name="event">Filter the report for a specific event type</param>
    /// <param name="tags">Filter the report for tags (serialized and urlencoded array)</param>
    /// <param name="messageId">Filter on a specific message id</param>
    /// <param name="templateId">Filter on a specific template id</param>
    /// <returns>Email events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetEmailEventReport> GetEmailEventReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string email, Event? @event, string tags, string messageId, long? templateId, CancellationToken cancellationToken);

    /// <summary>
    /// Unblock or resubscribe a transactional contact
    /// </summary>
    /// <param name="email">contact email (urlencoded) to unblock.</param>
    /// <returns>Contact unblocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task BlockedContactsAsync(string email);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Unblock or resubscribe a transactional contact
    /// </summary>
    /// <param name="email">contact email (urlencoded) to unblock.</param>
    /// <returns>Contact unblocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task BlockedContactsAsync(string email, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of blocked or unsubscribed transactional contacts
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="senders">Comma separated list of emails of the senders from which contacts are blocked or unsubscribed</param>
    /// <returns>List of blocked or unsubscribed transactional contacts</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacBlockedContacts> GetTransacBlockedContactsAsync(string startDate, string endDate, long? limit, long? offset, IEnumerable<string> senders);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of blocked or unsubscribed transactional contacts
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="senders">Comma separated list of emails of the senders from which contacts are blocked or unsubscribed</param>
    /// <returns>List of blocked or unsubscribed transactional contacts</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacBlockedContacts> GetTransacBlockedContactsAsync(string startDate, string endDate, long? limit, long? offset, IEnumerable<string> senders, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of blocked domains
    /// </summary>
    /// <returns>List of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetBlockedDomains> GetBlockedDomainsAsync();

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of blocked domains
    /// </summary>
    /// <returns>List of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetBlockedDomains> GetBlockedDomainsAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Add a new domain to the list of blocked domains
    /// </summary>
    /// <returns>Domain is successfully blocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task BlockNewDomainAsync(BlockDomain blockDomain);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add a new domain to the list of blocked domains
    /// </summary>
    /// <returns>Domain is successfully blocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task BlockNewDomainAsync(BlockDomain blockDomain, CancellationToken cancellationToken);

    /// <summary>
    /// Unblock an existing domain from the list of blocked domains
    /// </summary>
    /// <param name="domain">The name of the domain to be deleted</param>
    /// <returns>Domain is successfully deleted from the list of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteBlockedDomainAsync(string domain);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Unblock an existing domain from the list of blocked domains
    /// </summary>
    /// <param name="domain">The name of the domain to be deleted</param>
    /// <returns>Domain is successfully deleted from the list of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteBlockedDomainAsync(string domain, CancellationToken cancellationToken);

    /// <summary>
    /// Delete hardbounces
    /// </summary>
    /// <param name="deleteHardbounces">values to delete hardbounces</param>
    /// <returns>Hardbounces deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteHardbouncesAsync(DeleteHardbounces deleteHardbounces);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete hardbounces
    /// </summary>
    /// <param name="deleteHardbounces">values to delete hardbounces</param>
    /// <returns>Hardbounces deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteHardbouncesAsync(DeleteHardbounces deleteHardbounces, CancellationToken cancellationToken);

    /// <summary>
    /// Send a template
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    [Obsolete]
    Task<SendTemplateEmail> SendTemplateAsync(long templateId, SendEmail sendEmail);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a template
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    [Obsolete]
    Task<SendTemplateEmail> SendTemplateAsync(long templateId, SendEmail sendEmail, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the contacts
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>All contacts listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContacts> GetContactsAsync(long? limit, long? offset, DateTime? modifiedSince, DateTime? createdSince, Sort? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the contacts
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>All contacts listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContacts> GetContactsAsync(long? limit, long? offset, DateTime? modifiedSince, DateTime? createdSince, Sort? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Create a contact
    /// </summary>
    /// <param name="createContact">Values to create a contact</param>
    /// <returns>Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateUpdateContactModel> CreateContactAsync(CreateContact createContact);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a contact
    /// </summary>
    /// <param name="createContact">Values to create a contact</param>
    /// <returns>Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateUpdateContactModel> CreateContactAsync(CreateContact createContact, CancellationToken cancellationToken);

    /// <summary>
    /// Create Contact via DOI (Double-Opt-In) Flow
    /// </summary>
    /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
    /// <returns>DOI Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateDoiContactAsync(CreateDoiContact createDoiContact);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create Contact via DOI (Double-Opt-In) Flow
    /// </summary>
    /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
    /// <returns>DOI Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateDoiContactAsync(CreateDoiContact createDoiContact, CancellationToken cancellationToken);

    /// <summary>
    /// Get a contact's details
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetExtendedContactDetails> GetContactInfoAsync(string email);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a contact's details
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetExtendedContactDetails> GetContactInfoAsync(string email, CancellationToken cancellationToken);

    /// <summary>
    /// Update a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <param name="updateContact">Values to update a contact</param>
    /// <returns>Contact updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateContactAsync(string email, UpdateContact updateContact);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <param name="updateContact">Values to update a contact</param>
    /// <returns>Contact updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateContactAsync(string email, UpdateContact updateContact, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <returns>Contact deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteContactAsync(string email);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <returns>Contact deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteContactAsync(string email, CancellationToken cancellationToken);

    /// <summary>
    /// Get email campaigns' statistics for a contact
    /// </summary>
    /// <param name="email">Email address (urlencoded) of the contact</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate</param>
    /// <returns>Contact campaign statistics informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContactCampaignStats> GetContactStatsAsync(string email, DateTime? startDate, DateTime? endDate);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get email campaigns' statistics for a contact
    /// </summary>
    /// <param name="email">Email address (urlencoded) of the contact</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate</param>
    /// <returns>Contact campaign statistics informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContactCampaignStats> GetContactStatsAsync(string email, DateTime? startDate, DateTime? endDate, CancellationToken cancellationToken);

    /// <summary>
    /// List all attributes
    /// </summary>
    /// <returns>Attributes listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAttributes> GetAttributesAsync();

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List all attributes
    /// </summary>
    /// <returns>Attributes listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAttributes> GetAttributesAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Create contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the attribute</param>
    /// <param name="createAttribute">Values to create an attribute</param>
    /// <returns>Attribute created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateAttributeAsync(AttributeCategory attributeCategory, string attributeName, CreateAttribute createAttribute);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the attribute</param>
    /// <param name="createAttribute">Values to create an attribute</param>
    /// <returns>Attribute created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateAttributeAsync(AttributeCategory attributeCategory, string attributeName, CreateAttribute createAttribute, CancellationToken cancellationToken);

    /// <summary>
    /// Update contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <param name="updateAttribute">Values to update an attribute</param>
    /// <returns>Attribute updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateAttributeAsync(AttributeCategory2 attributeCategory, string attributeName, UpdateAttribute updateAttribute);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <param name="updateAttribute">Values to update an attribute</param>
    /// <returns>Attribute updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateAttributeAsync(AttributeCategory2 attributeCategory, string attributeName, UpdateAttribute updateAttribute, CancellationToken cancellationToken);

    /// <summary>
    /// Delete an attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <returns>Attribute deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteAttributeAsync(AttributeCategory3 attributeCategory, string attributeName);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <returns>Attribute deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteAttributeAsync(AttributeCategory3 attributeCategory, string attributeName, CancellationToken cancellationToken);

    /// <summary>
    /// Get all folders
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolders> GetFoldersAsync(long limit, long offset, Sort2? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all folders
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolders> GetFoldersAsync(long limit, long offset, Sort2? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Create a folder
    /// </summary>
    /// <param name="createFolder">Name of the folder</param>
    /// <returns>Folder created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateFolderAsync(CreateUpdateFolder createFolder);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a folder
    /// </summary>
    /// <param name="createFolder">Name of the folder</param>
    /// <returns>Folder created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateFolderAsync(CreateUpdateFolder createFolder, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the segments
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSegments> GetSegmentsAsync(long limit, long offset, Sort3? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the segments
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSegments> GetSegmentsAsync(long limit, long offset, Sort3? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Returns a folder's details
    /// </summary>
    /// <param name="folderId">id of the folder</param>
    /// <returns>Folder details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolder> GetFolderAsync(long folderId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns a folder's details
    /// </summary>
    /// <param name="folderId">id of the folder</param>
    /// <returns>Folder details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolder> GetFolderAsync(long folderId, CancellationToken cancellationToken);

    /// <summary>
    /// Update a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="updateFolder">Name of the folder</param>
    /// <returns>Folder updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="updateFolder">Name of the folder</param>
    /// <returns>Folder updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a folder (and all its lists)
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <returns>Folder deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteFolderAsync(long folderId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a folder (and all its lists)
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <returns>Folder deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteFolderAsync(long folderId, CancellationToken cancellationToken);

    /// <summary>
    /// Get lists in a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folder's Lists details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolderLists> GetFolderListsAsync(long folderId, long? limit, long? offset, Sort4? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get lists in a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folder's Lists details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetFolderLists> GetFolderListsAsync(long folderId, long? limit, long? offset, Sort4? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the lists
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Lists informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetLists> GetListsAsync(long? limit, long? offset, Sort5? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the lists
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Lists informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetLists> GetListsAsync(long? limit, long? offset, Sort5? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Create a list
    /// </summary>
    /// <param name="createList">Values to create a list</param>
    /// <returns>List created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateListAsync(CreateList createList);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a list
    /// </summary>
    /// <param name="createList">Values to create a list</param>
    /// <returns>List created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateListAsync(CreateList createList, CancellationToken cancellationToken);

    /// <summary>
    /// Get a list's details
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetExtendedList> GetListAsync(long listId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a list's details
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetExtendedList> GetListAsync(long listId, CancellationToken cancellationToken);

    /// <summary>
    /// Update a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="updateList">Values to update a list</param>
    /// <returns>List updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateListAsync(long listId, UpdateList updateList);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="updateList">Values to update a list</param>
    /// <returns>List updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateListAsync(long listId, UpdateList updateList, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteListAsync(long listId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteListAsync(long listId, CancellationToken cancellationToken);

    /// <summary>
    /// Get contacts in a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContacts> GetContactsFromListAsync(long listId, DateTime? modifiedSince, long? limit, long? offset, Sort6? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get contacts in a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetContacts> GetContactsFromListAsync(long listId, DateTime? modifiedSince, long? limit, long? offset, Sort6? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Add existing contacts to a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails addresses of the contacts</param>
    /// <returns>All contacts have been added successfully to the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<PostContactInfo> AddContactToListAsync(long listId, AddContactToList contactEmails);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add existing contacts to a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails addresses of the contacts</param>
    /// <returns>All contacts have been added successfully to the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<PostContactInfo> AddContactToListAsync(long listId, AddContactToList contactEmails, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a contact from a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails adresses of the contact</param>
    /// <returns>All contacts have been removed successfully from the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<PostContactInfo> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a contact from a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails adresses of the contact</param>
    /// <returns>All contacts have been removed successfully from the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<PostContactInfo> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, CancellationToken cancellationToken);

    /// <summary>
    /// Export contacts
    /// </summary>
    /// <param name="requestContactExport">Values to request a contact export</param>
    /// <returns>Contact export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> RequestContactExportAsync(RequestContactExport requestContactExport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export contacts
    /// </summary>
    /// <param name="requestContactExport">Values to request a contact export</param>
    /// <returns>Contact export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> RequestContactExportAsync(RequestContactExport requestContactExport, CancellationToken cancellationToken);

    /// <summary>
    /// Import contacts
    /// </summary>
    /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``</param>
    /// <returns>Contact import request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> ImportContactsAsync(RequestContactImport requestContactImport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Import contacts
    /// </summary>
    /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``</param>
    /// <returns>Contact import request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> ImportContactsAsync(RequestContactImport requestContactImport, CancellationToken cancellationToken);

    /// <summary>
    /// Returns the information for all your created SMS campaigns
    /// </summary>
    /// <param name="status">Status of campaign.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>SMS campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsCampaigns> GetSmsCampaignsAsync(Status2? status, DateTime? startDate, DateTime? endDate, long? limit, long? offset);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns the information for all your created SMS campaigns
    /// </summary>
    /// <param name="status">Status of campaign.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>SMS campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsCampaigns> GetSmsCampaignsAsync(Status2? status, DateTime? startDate, DateTime? endDate, long? limit, long? offset, CancellationToken cancellationToken);

    /// <summary>
    /// Creates an SMS campaign
    /// </summary>
    /// <param name="createSmsCampaign">Values to create an SMS Campaign</param>
    /// <returns>SMS campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateSmsCampaignAsync(CreateSmsCampaign createSmsCampaign);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Creates an SMS campaign
    /// </summary>
    /// <param name="createSmsCampaign">Values to create an SMS Campaign</param>
    /// <returns>SMS campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateSmsCampaignAsync(CreateSmsCampaign createSmsCampaign, CancellationToken cancellationToken);

    /// <summary>
    /// Get an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsCampaign> GetSmsCampaignAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsCampaign> GetSmsCampaignAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Update an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <param name="updateSmsCampaign">Values to update an SMS Campaign</param>
    /// <returns>SMS campaign updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmsCampaignAsync(long campaignId, UpdateSmsCampaign updateSmsCampaign);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <param name="updateSmsCampaign">Values to update an SMS Campaign</param>
    /// <returns>SMS campaign updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmsCampaignAsync(long campaignId, UpdateSmsCampaign updateSmsCampaign, CancellationToken cancellationToken);

    /// <summary>
    /// Delete an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSmsCampaignAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSmsCampaignAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Send your SMS campaign immediately
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>SMS campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendSmsCampaignNowAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send your SMS campaign immediately
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>SMS campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendSmsCampaignNowAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Update a campaign's status
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="status">Status of the campaign.</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmsCampaignStatusAsync(long campaignId, UpdateCampaignStatus status);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a campaign's status
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="status">Status of the campaign.</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSmsCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, CancellationToken cancellationToken);

    /// <summary>
    /// Send a test SMS campaign
    /// </summary>
    /// <param name="campaignId">Id of the SMS campaign</param>
    /// <param name="phoneNumber">Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted</param>
    /// <returns>Test SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestSmsAsync(long campaignId, SendTestSms phoneNumber);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a test SMS campaign
    /// </summary>
    /// <param name="campaignId">Id of the SMS campaign</param>
    /// <param name="phoneNumber">Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted</param>
    /// <returns>Test SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendTestSmsAsync(long campaignId, SendTestSms phoneNumber, CancellationToken cancellationToken);

    /// <summary>
    /// Export an SMS campaign's recipients
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> RequestSmsRecipientExportAsync(long campaignId, RequestSmsRecipientExport recipientExport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export an SMS campaign's recipients
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreatedProcessId> RequestSmsRecipientExportAsync(long campaignId, RequestSmsRecipientExport recipientExport, CancellationToken cancellationToken);

    /// <summary>
    /// Send an SMS campaign's report
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendSmsReportAsync(long campaignId, SendReport sendReport);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an SMS campaign's report
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task SendSmsReportAsync(long campaignId, SendReport sendReport, CancellationToken cancellationToken);

    /// <summary>
    /// Send SMS message to a mobile number
    /// </summary>
    /// <param name="sendTransacSms">Values to send a transactional SMS</param>
    /// <returns>SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<SendSms> SendTransacSmsAsync(SendTransacSms sendTransacSms);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send SMS message to a mobile number
    /// </summary>
    /// <param name="sendTransacSms">Values to send a transactional SMS</param>
    /// <returns>SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<SendSms> SendTransacSmsAsync(SendTransacSms sendTransacSms, CancellationToken cancellationToken);

    /// <summary>
    /// Get your SMS activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate</param>
    /// <param name="tag">Filter on a tag</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacAggregatedSmsReport> GetTransacAggregatedSmsReportAsync(string startDate, string endDate, int? days, string tag);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your SMS activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate</param>
    /// <param name="tag">Filter on a tag</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacAggregatedSmsReport> GetTransacAggregatedSmsReportAsync(string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken);

    /// <summary>
    /// Get your SMS activity aggregated per day
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Filter on a tag</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacSmsReport> GetTransacSmsReportAsync(string startDate, string endDate, int? days, string tag, Sort7? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your SMS activity aggregated per day
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Filter on a tag</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetTransacSmsReport> GetTransacSmsReportAsync(string startDate, string endDate, int? days, string tag, Sort7? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Get all your SMS activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="phoneNumber">Filter the report for a specific phone number</param>
    /// <param name="event">Filter the report for specific events</param>
    /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Sms events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsEventReport> GetSmsEventsAsync(long? limit, string startDate, string endDate, long? offset, int? days, string phoneNumber, Event2? @event, string tags, Sort8? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all your SMS activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="phoneNumber">Filter the report for a specific phone number</param>
    /// <param name="event">Filter the report for specific events</param>
    /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Sms events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSmsEventReport> GetSmsEventsAsync(long? limit, string startDate, string endDate, long? offset, int? days, string phoneNumber, Event2? @event, string tags, Sort8? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Get a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Get WhatsApp campaign information on the basis of campaignId</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWhatsappCampaignOverview> GetWhatsAppCampaignAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Get WhatsApp campaign information on the basis of campaignId</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWhatsappCampaignOverview> GetWhatsAppCampaignAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>WhatsApp campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteWhatsAppCampaignAsync(long campaignId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>WhatsApp campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteWhatsAppCampaignAsync(long campaignId, CancellationToken cancellationToken);

    /// <summary>
    /// Return all your created WhatsApp templates
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWATemplates> GetWhatsAppTemplatesAsync(string startDate, string endDate, long? limit, long? offset, Sort9? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created WhatsApp templates
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWATemplates> GetWhatsAppTemplatesAsync(string startDate, string endDate, long? limit, long? offset, Sort9? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Return all your created WhatsApp campaigns
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWhatsappCampaigns> GetWhatsAppCampaignsAsync(string startDate, string endDate, long? limit, long? offset, Sort10? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created WhatsApp campaigns
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWhatsappCampaigns> GetWhatsAppCampaignsAsync(string startDate, string endDate, long? limit, long? offset, Sort10? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of all your senders
    /// </summary>
    /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only)</param>
    /// <param name="domain">Filter your senders for a specific domain</param>
    /// <returns>list of senders</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSendersList> GetSendersAsync(string ip, string domain);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of all your senders
    /// </summary>
    /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only)</param>
    /// <param name="domain">Filter your senders for a specific domain</param>
    /// <returns>list of senders</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSendersList> GetSendersAsync(string ip, string domain, CancellationToken cancellationToken);

    /// <summary>
    /// Create a new sender
    /// </summary>
    /// <param name="sender">sender's name</param>
    /// <returns>sender created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateSenderModel> CreateSenderAsync(CreateSender sender);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a new sender
    /// </summary>
    /// <param name="sender">sender's name</param>
    /// <returns>sender created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateSenderModel> CreateSenderAsync(CreateSender sender, CancellationToken cancellationToken);

    /// <summary>
    /// Update a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <param name="sender">sender's name</param>
    /// <returns>sender updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSenderAsync(long senderId, UpdateSender sender);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <param name="sender">sender's name</param>
    /// <returns>sender updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateSenderAsync(long senderId, UpdateSender sender, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>sender deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSenderAsync(long senderId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>sender deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteSenderAsync(long senderId, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the dedicated IPs for a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetIpsFromSender> GetIpsFromSenderAsync(long senderId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the dedicated IPs for a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetIpsFromSender> GetIpsFromSenderAsync(long senderId, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the dedicated IPs for your account
    /// </summary>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetIps> GetIpsAsync();

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the dedicated IPs for your account
    /// </summary>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetIps> GetIpsAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Create a webhook
    /// </summary>
    /// <param name="createWebhook">Values to create a webhook</param>
    /// <returns>Webhook created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateWebhookAsync(CreateWebhook createWebhook);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a webhook
    /// </summary>
    /// <param name="createWebhook">Values to create a webhook</param>
    /// <returns>Webhook created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateModel> CreateWebhookAsync(CreateWebhook createWebhook, CancellationToken cancellationToken);

    /// <summary>
    /// Get all webhooks
    /// </summary>
    /// <param name="type">Filter on webhook type</param>
    /// <param name="sort">Sort the results in the ascending/descending order of webhook creation</param>
    /// <returns>Webhooks informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWebhooks> GetWebhooksAsync(Type2? type, Sort11? sort);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all webhooks
    /// </summary>
    /// <param name="type">Filter on webhook type</param>
    /// <param name="sort">Sort the results in the ascending/descending order of webhook creation</param>
    /// <returns>Webhooks informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWebhooks> GetWebhooksAsync(Type2? type, Sort11? sort, CancellationToken cancellationToken);

    /// <summary>
    /// Get a webhook details
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWebhook> GetWebhookAsync(long webhookId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a webhook details
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetWebhook> GetWebhookAsync(long webhookId, CancellationToken cancellationToken);

    /// <summary>
    /// Update a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <param name="updateWebhook">Values to update a webhook</param>
    /// <returns>Webhook updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateWebhookAsync(long webhookId, UpdateWebhook updateWebhook);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <param name="updateWebhook">Values to update a webhook</param>
    /// <returns>Webhook updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateWebhookAsync(long webhookId, UpdateWebhook updateWebhook, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteWebhookAsync(long webhookId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteWebhookAsync(long webhookId, CancellationToken cancellationToken);

    /// <summary>
    /// Get the list of all children accounts
    /// </summary>
    /// <param name="limit">Number of documents for child accounts information per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>list of children</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildrenList> GetResellerChildsAsync(long? limit, long? offset);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of all children accounts
    /// </summary>
    /// <param name="limit">Number of documents for child accounts information per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>list of children</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildrenList> GetResellerChildsAsync(long? limit, long? offset, CancellationToken cancellationToken);

    /// <summary>
    /// Creates a reseller child
    /// </summary>
    /// <param name="resellerChild">reseller child to add</param>
    /// <returns>child created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateReseller> CreateResellerChildAsync(CreateChild resellerChild);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Creates a reseller child
    /// </summary>
    /// <param name="resellerChild">reseller child to add</param>
    /// <returns>child created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<CreateReseller> CreateResellerChildAsync(CreateChild resellerChild, CancellationToken cancellationToken);

    /// <summary>
    /// Get a child account's details
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Information for the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildInfo> GetChildInfoAsync(string childIdentifier);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a child account's details
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Information for the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildInfo> GetChildInfoAsync(string childIdentifier, CancellationToken cancellationToken);

    /// <summary>
    /// Update info of reseller's child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="resellerChild">values to update in child profile</param>
    /// <returns>reseller's child updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateResellerChildAsync(string childIdentifier, UpdateChild resellerChild);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update info of reseller's child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="resellerChild">values to update in child profile</param>
    /// <returns>reseller's child updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateResellerChildAsync(string childIdentifier, UpdateChild resellerChild, CancellationToken cancellationToken);

    /// <summary>
    /// Delete a single reseller child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or child id of reseller's child</param>
    /// <returns>child deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteResellerChildAsync(string childIdentifier);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a single reseller child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or child id of reseller's child</param>
    /// <returns>child deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteResellerChildAsync(string childIdentifier, CancellationToken cancellationToken);

    /// <summary>
    /// Update info of reseller's child account status based on the identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="updateChildAccountStatus">values to update in child account status</param>
    /// <returns>reseller's child account status updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateChildAccountStatusAsync(string childIdentifier, UpdateChildAccountStatus updateChildAccountStatus);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update info of reseller's child account status based on the identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="updateChildAccountStatus">values to update in child account status</param>
    /// <returns>reseller's child account status updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateChildAccountStatusAsync(string childIdentifier, UpdateChildAccountStatus updateChildAccountStatus, CancellationToken cancellationToken);

    /// <summary>
    /// Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>status of reseller's child account</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync(string childIdentifier);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>status of reseller's child account</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync(string childIdentifier, CancellationToken cancellationToken);

    /// <summary>
    /// Associate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to associate</param>
    /// <returns>Dedicated IP is associated to the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task AssociateIpToChildAsync(string childIdentifier, ManageIp ip);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Associate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to associate</param>
    /// <returns>Dedicated IP is associated to the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task AssociateIpToChildAsync(string childIdentifier, ManageIp ip, CancellationToken cancellationToken);

    /// <summary>
    /// Dissociate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to dissociate</param>
    /// <returns>Dedicated IP is dissociated from the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DissociateIpFromChildAsync(string childIdentifier, ManageIp ip);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Dissociate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to dissociate</param>
    /// <returns>Dedicated IP is dissociated from the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DissociateIpFromChildAsync(string childIdentifier, ManageIp ip, CancellationToken cancellationToken);

    /// <summary>
    /// Add Email and/or SMS credits to a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addCredits">Values to post to add credit to a specific child account</param>
    /// <returns>Credits added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<RemainingCreditModel> AddCreditsAsync(string childIdentifier, AddCredits addCredits);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add Email and/or SMS credits to a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addCredits">Values to post to add credit to a specific child account</param>
    /// <returns>Credits added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<RemainingCreditModel> AddCreditsAsync(string childIdentifier, AddCredits addCredits, CancellationToken cancellationToken);

    /// <summary>
    /// Remove Email and/or SMS credits from a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
    /// <returns>Credits removed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<RemainingCreditModel> RemoveCreditsAsync(string childIdentifier, RemoveCredits removeCredits);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Remove Email and/or SMS credits from a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
    /// <returns>Credits removed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<RemainingCreditModel> RemoveCreditsAsync(string childIdentifier, RemoveCredits removeCredits, CancellationToken cancellationToken);

    /// <summary>
    /// Get all sender domains for a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Sender domains of the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<ICollection<Anonymous>> GetChildDomainsAsync(string childIdentifier);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all sender domains for a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Sender domains of the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<ICollection<Anonymous>> GetChildDomainsAsync(string childIdentifier, CancellationToken cancellationToken);

    /// <summary>
    /// Create a domain for a child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
    /// <returns>Domain added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateChildDomainAsync(string childIdentifier, AddChildDomain addChildDomain);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a domain for a child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
    /// <returns>Domain added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task CreateChildDomainAsync(string childIdentifier, AddChildDomain addChildDomain, CancellationToken cancellationToken);

    /// <summary>
    /// Update the sender domain of reseller's child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be updated</param>
    /// <param name="updateChildDomain">value to update for sender domain</param>
    /// <returns>reseller's child domain updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateChildDomainAsync(string childIdentifier, string domainName, UpdateChildDomain updateChildDomain);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update the sender domain of reseller's child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be updated</param>
    /// <param name="updateChildDomain">value to update for sender domain</param>
    /// <returns>reseller's child domain updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task UpdateChildDomainAsync(string childIdentifier, string domainName, UpdateChildDomain updateChildDomain, CancellationToken cancellationToken);

    /// <summary>
    /// Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
    /// <returns>child domain deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteChildDomainAsync(string childIdentifier, string domainName);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
    /// <returns>child domain deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task DeleteChildDomainAsync(string childIdentifier, string domainName, CancellationToken cancellationToken);

    /// <summary>
    /// Get session token to access Sendinblue (SSO)
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Session token</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSsoToken> GetSsoTokenAsync(string childIdentifier);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get session token to access Sendinblue (SSO)
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Session token</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetSsoToken> GetSsoTokenAsync(string childIdentifier, CancellationToken cancellationToken);

    /// <summary>
    /// Get your account information, plan and credits details
    /// </summary>
    /// <returns>account informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAccount> GetAccountAsync();

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your account information, plan and credits details
    /// </summary>
    /// <returns>account informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetAccount> GetAccountAsync(CancellationToken cancellationToken);

    /// <summary>
    /// Return all the processes for your account
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>processes informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetProcesses> GetProcessesAsync(long? limit, long? offset);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all the processes for your account
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>processes informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetProcesses> GetProcessesAsync(long? limit, long? offset, CancellationToken cancellationToken);

    /// <summary>
    /// Return the informations for a process
    /// </summary>
    /// <param name="processId">Id of the process</param>
    /// <returns>process informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetProcess> GetProcessAsync(long processId);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return the informations for a process
    /// </summary>
    /// <param name="processId">Id of the process</param>
    /// <returns>process informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    Task<GetProcess> GetProcessAsync(long processId, CancellationToken cancellationToken);

}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendinBlueClient : ISendinBlueClient
{
    private HttpClient _httpClient;
    private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public SendinBlueClient(HttpClient httpClient)
    {
        _httpClient = httpClient;
        _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
        var settings = new Newtonsoft.Json.JsonSerializerSettings();
        UpdateJsonSerializerSettings(settings);
        return settings;
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

    /// <summary>
    /// Return all your created email campaigns
    /// </summary>
    /// <param name="type">Filter on the type of the campaigns</param>
    /// <param name="status">Filter on the status of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body</param>
    /// <returns>Email campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetEmailCampaigns> GetEmailCampaignsAsync(Type? type, Status? status, Statistics? statistics, DateTime? startDate, DateTime? endDate, long? limit, long? offset, bool? excludeHtmlContent)
    {
        return GetEmailCampaignsAsync(type, status, statistics, startDate, endDate, limit, offset, excludeHtmlContent, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created email campaigns
    /// </summary>
    /// <param name="type">Filter on the type of the campaigns</param>
    /// <param name="status">Filter on the status of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="excludeHtmlContent">Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body</param>
    /// <returns>Email campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetEmailCampaigns> GetEmailCampaignsAsync(Type? type, Status? status, Statistics? statistics, DateTime? startDate, DateTime? endDate, long? limit, long? offset, bool? excludeHtmlContent, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns?");
        if (type != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("type") + "=").Append(Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (status != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("status") + "=").Append(Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (statistics != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("statistics") + "=").Append(Uri.EscapeDataString(ConvertToString(statistics, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (excludeHtmlContent != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("excludeHtmlContent") + "=").Append(Uri.EscapeDataString(ConvertToString(excludeHtmlContent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetEmailCampaigns>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create an email campaign
    /// </summary>
    /// <param name="emailCampaigns">Values to create a campaign</param>
    /// <returns>Email campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns)
    {
        return CreateEmailCampaignAsync(emailCampaigns, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create an email campaign
    /// </summary>
    /// <param name="emailCampaigns">Values to create a campaign</param>
    /// <returns>Email campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateEmailCampaignAsync(CreateEmailCampaign emailCampaigns, CancellationToken cancellationToken)
    {
        if (emailCampaigns == null)
            throw new ArgumentNullException("emailCampaigns");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailCampaigns, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get an email campaign report
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <returns>Email campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetEmailCampaign> GetEmailCampaignAsync(long campaignId, Statistics2? statistics)
    {
        return GetEmailCampaignAsync(campaignId, statistics, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an email campaign report
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="statistics">Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.</param>
    /// <returns>Email campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetEmailCampaign> GetEmailCampaignAsync(long campaignId, Statistics2? statistics, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}?");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));
        if (statistics != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("statistics") + "=").Append(Uri.EscapeDataString(ConvertToString(statistics, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetEmailCampaign>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="emailCampaign">Values to update a campaign</param>
    /// <returns>Email Campaign has been updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign)
    {
        return UpdateEmailCampaignAsync(campaignId, emailCampaign, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="emailCampaign">Values to update a campaign</param>
    /// <returns>Email Campaign has been updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateEmailCampaignAsync(long campaignId, UpdateEmailCampaign emailCampaign, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (emailCampaign == null)
            throw new ArgumentNullException("emailCampaign");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailCampaign, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete an email campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>Email campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteEmailCampaignAsync(long campaignId)
    {
        return DeleteEmailCampaignAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an email campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>Email campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteEmailCampaignAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send an email campaign immediately, based on campaignId
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Email campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendEmailCampaignNowAsync(long campaignId)
    {
        return SendEmailCampaignNowAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an email campaign immediately, based on campaignId
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Email campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendEmailCampaignNowAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/sendNow");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Content = new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign could not be sent", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 402)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("You don\'t have enough credit to send your campaign. Please update your plan", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send an email campaign to your test list
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendTestEmailAsync(long campaignId, SendTestEmail emailTo)
    {
        return SendTestEmailAsync(campaignId, emailTo, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an email campaign to your test list
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendTestEmailAsync(long campaignId, SendTestEmail emailTo, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (emailTo == null)
            throw new ArgumentNullException("emailTo");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/sendTest");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(emailTo, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostSendFailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<PostSendFailed>("Test email could not be sent to the following email addresses", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update an email campaign status
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="status">Status of the campaign</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status)
    {
        return UpdateCampaignStatusAsync(campaignId, status, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email campaign status
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="status">Status of the campaign</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (status == null)
            throw new ArgumentNullException("status");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/status");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(status, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send the report of a campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendReportAsync(long campaignId, SendReport sendReport)
    {
        return SendReportAsync(campaignId, sendReport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send the report of a campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendReportAsync(long campaignId, SendReport sendReport, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (sendReport == null)
            throw new ArgumentNullException("sendReport");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/sendReport");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendReport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get an A/B test email campaign results
    /// </summary>
    /// <param name="campaignId">Id of the A/B test campaign</param>
    /// <returns>A/B test email campaign Result</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<AbTestCampaignResult> GetAbTestCampaignResultAsync(long campaignId)
    {
        return GetAbTestCampaignResultAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an A/B test email campaign results
    /// </summary>
    /// <param name="campaignId">Id of the A/B test campaign</param>
    /// <returns>A/B test email campaign Result</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<AbTestCampaignResult> GetAbTestCampaignResultAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/abTestCampaignResult");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<AbTestCampaignResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("A/B test Email Campaign not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a shared template url
    /// </summary>
    /// <param name="campaignId">Id of the campaign or template</param>
    /// <returns>Shared template URL information</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSharedTemplateUrl> GetSharedTemplateUrlAsync(long campaignId)
    {
        return GetSharedTemplateUrlAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a shared template url
    /// </summary>
    /// <param name="campaignId">Id of the campaign or template</param>
    /// <returns>Shared template URL information</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSharedTemplateUrl> GetSharedTemplateUrlAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/sharedUrl");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSharedTemplateUrl>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign/Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 405)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Only email campaigns or templates are allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Export the recipients of an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreatedProcessId> EmailExportRecipientsAsync(long campaignId, EmailExportRecipients recipientExport)
    {
        return EmailExportRecipientsAsync(campaignId, recipientExport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export the recipients of an email campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreatedProcessId> EmailExportRecipientsAsync(long campaignId, EmailExportRecipients recipientExport, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/{campaignId}/exportRecipients");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(recipientExport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 202)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreatedProcessId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Upload an image to your account's image gallery
    /// </summary>
    /// <param name="uploadImage">Parameters to upload an image</param>
    /// <returns>Image successfully uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UploadImageToGalleryAsync(UploadImageToGallery uploadImage)
    {
        return UploadImageToGalleryAsync(uploadImage, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Upload an image to your account's image gallery
    /// </summary>
    /// <param name="uploadImage">Parameters to upload an image</param>
    /// <returns>Image successfully uploaded</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UploadImageToGalleryAsync(UploadImageToGallery uploadImage, CancellationToken cancellationToken)
    {
        if (uploadImage == null)
            throw new ArgumentNullException("uploadImage");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("emailCampaigns/images");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(uploadImage, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send a transactional email
    /// </summary>
    /// <param name="sendSmtpEmail">Values to send a transactional email</param>
    /// <returns>transactional email sent</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateSmtpEmail> SendTransacEmailAsync(SendSmtpEmail sendSmtpEmail)
    {
        return SendTransacEmailAsync(sendSmtpEmail, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a transactional email
    /// </summary>
    /// <param name="sendSmtpEmail">Values to send a transactional email</param>
    /// <returns>transactional email sent</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateSmtpEmail> SendTransacEmailAsync(SendSmtpEmail sendSmtpEmail, CancellationToken cancellationToken)
    {
        if (sendSmtpEmail == null)
            throw new ArgumentNullException("sendSmtpEmail");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/email");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendSmtpEmail, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateSmtpEmail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of transactional emails on the basis of allowed filters
    /// </summary>
    /// <param name="email">Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.</param>
    /// <param name="templateId">Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.</param>
    /// <param name="messageId">Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <returns>List of transactional emails</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetTransacEmailsList> GetTransacEmailsListAsync(string email, long? templateId, string messageId, DateTime? startDate, DateTime? endDate)
    {
        return GetTransacEmailsListAsync(email, templateId, messageId, startDate, endDate, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of transactional emails on the basis of allowed filters
    /// </summary>
    /// <param name="email">Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.</param>
    /// <param name="templateId">Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.</param>
    /// <param name="messageId">Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.</param>
    /// <returns>List of transactional emails</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetTransacEmailsList> GetTransacEmailsListAsync(string email, long? templateId, string messageId, DateTime? startDate, DateTime? endDate, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/emails?");
        if (email != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("email") + "=").Append(Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (templateId != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("templateId") + "=").Append(Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (messageId != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("messageId") + "=").Append(Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetTransacEmailsList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the personalized content of a sent transactional email
    /// </summary>
    /// <param name="uuid">Unique id of the transactional email that has been sent to a particular contact</param>
    /// <returns>Transactional email content</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetTransacEmailContent> GetTransacEmailContentAsync(string uuid)
    {
        return GetTransacEmailContentAsync(uuid, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the personalized content of a sent transactional email
    /// </summary>
    /// <param name="uuid">Unique id of the transactional email that has been sent to a particular contact</param>
    /// <returns>Transactional email content</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetTransacEmailContent> GetTransacEmailContentAsync(string uuid, CancellationToken cancellationToken)
    {
        if (uuid == null)
            throw new ArgumentNullException("uuid");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/emails/{uuid}");
        urlBuilder_.Replace("{uuid}", Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetTransacEmailContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete an SMTP transactional log
    /// </summary>
    /// <param name="messageId">MessageId of the transactional log to delete</param>
    /// <returns>Transactional Logs deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task LogAsync(string messageId)
    {
        return LogAsync(messageId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an SMTP transactional log
    /// </summary>
    /// <param name="messageId">MessageId of the transactional log to delete</param>
    /// <returns>Transactional Logs deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task LogAsync(string messageId, CancellationToken cancellationToken)
    {
        if (messageId == null)
            throw new ArgumentNullException("messageId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/log/{messageId}");
        urlBuilder_.Replace("{messageId}", Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Message ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of email templates
    /// </summary>
    /// <param name="templateStatus">Filter on the status of the template. Active = true, inactive = false</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>transactional email templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSmtpTemplates> GetSmtpTemplatesAsync(bool? templateStatus, long? limit, long? offset)
    {
        return GetSmtpTemplatesAsync(templateStatus, limit, offset, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of email templates
    /// </summary>
    /// <param name="templateStatus">Filter on the status of the template. Active = true, inactive = false</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>transactional email templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSmtpTemplates> GetSmtpTemplatesAsync(bool? templateStatus, long? limit, long? offset, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates?");
        if (templateStatus != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("templateStatus") + "=").Append(Uri.EscapeDataString(ConvertToString(templateStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSmtpTemplates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create an email template
    /// </summary>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateSmtpTemplateAsync(CreateSmtpTemplate smtpTemplate)
    {
        return CreateSmtpTemplateAsync(smtpTemplate, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create an email template
    /// </summary>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateSmtpTemplateAsync(CreateSmtpTemplate smtpTemplate, CancellationToken cancellationToken)
    {
        if (smtpTemplate == null)
            throw new ArgumentNullException("smtpTemplate");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(smtpTemplate, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Returns the template information
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Email template informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSmtpTemplateOverview> GetSmtpTemplateAsync(long templateId)
    {
        return GetSmtpTemplateAsync(templateId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns the template information
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Email template informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSmtpTemplateOverview> GetSmtpTemplateAsync(long templateId, CancellationToken cancellationToken)
    {
        if (templateId == null)
            throw new ArgumentNullException("templateId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates/{templateId}");
        urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSmtpTemplateOverview>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update an email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateSmtpTemplateAsync(long templateId, UpdateSmtpTemplate smtpTemplate)
    {
        return UpdateSmtpTemplateAsync(templateId, smtpTemplate, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <param name="smtpTemplate">values to update in transactional email template</param>
    /// <returns>transactional email template updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateSmtpTemplateAsync(long templateId, UpdateSmtpTemplate smtpTemplate, CancellationToken cancellationToken)
    {
        if (templateId == null)
            throw new ArgumentNullException("templateId");

        if (smtpTemplate == null)
            throw new ArgumentNullException("smtpTemplate");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates/{templateId}");
        urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(smtpTemplate, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete an inactive email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Inactive transactional email template has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteSmtpTemplateAsync(long templateId)
    {
        return DeleteSmtpTemplateAsync(templateId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an inactive email template
    /// </summary>
    /// <param name="templateId">id of the template</param>
    /// <returns>Inactive transactional email template has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteSmtpTemplateAsync(long templateId, CancellationToken cancellationToken)
    {
        if (templateId == null)
            throw new ArgumentNullException("templateId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates/{templateId}");
        urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send a template to your test list
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendTestTemplateAsync(long templateId, SendTestEmail sendTestEmail)
    {
        return SendTestTemplateAsync(templateId, sendTestEmail, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a template to your test list
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Test email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendTestTemplateAsync(long templateId, SendTestEmail sendTestEmail, CancellationToken cancellationToken)
    {
        if (templateId == null)
            throw new ArgumentNullException("templateId");

        if (sendTestEmail == null)
            throw new ArgumentNullException("sendTestEmail");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates/{templateId}/sendTest");
        urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendTestEmail, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostSendFailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<PostSendFailed>("Test email could not be sent to the following email addresses", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get your transactional email activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetAggregatedReport> GetAggregatedSmtpReportAsync(string startDate, string endDate, int? days, string tag)
    {
        return GetAggregatedSmtpReportAsync(startDate, endDate, days, tag, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your transactional email activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetAggregatedReport> GetAggregatedSmtpReportAsync(string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/statistics/aggregatedReport?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tag != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tag") + "=").Append(Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetAggregatedReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get your transactional email activity aggregated per day
    /// </summary>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetReports> GetSmtpReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string tag)
    {
        return GetSmtpReportAsync(limit, offset, startDate, endDate, days, tag, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your transactional email activity aggregated per day
    /// </summary>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Tag of the emails</param>
    /// <returns>Aggregated report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetReports> GetSmtpReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/statistics/reports?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tag != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tag") + "=").Append(Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetReports>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all your transactional email activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="email">Filter the report for a specific email addresses</param>
    /// <param name="event">Filter the report for a specific event type</param>
    /// <param name="tags">Filter the report for tags (serialized and urlencoded array)</param>
    /// <param name="messageId">Filter on a specific message id</param>
    /// <param name="templateId">Filter on a specific template id</param>
    /// <returns>Email events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetEmailEventReport> GetEmailEventReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string email, Event? @event, string tags, string messageId, long? templateId)
    {
        return GetEmailEventReportAsync(limit, offset, startDate, endDate, days, email, @event, tags, messageId, templateId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all your transactional email activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="email">Filter the report for a specific email addresses</param>
    /// <param name="event">Filter the report for a specific event type</param>
    /// <param name="tags">Filter the report for tags (serialized and urlencoded array)</param>
    /// <param name="messageId">Filter on a specific message id</param>
    /// <param name="templateId">Filter on a specific template id</param>
    /// <returns>Email events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetEmailEventReport> GetEmailEventReportAsync(long? limit, long? offset, string startDate, string endDate, int? days, string email, Event? @event, string tags, string messageId, long? templateId, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/statistics/events?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (email != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("email") + "=").Append(Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (@event != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("event") + "=").Append(Uri.EscapeDataString(ConvertToString(@event, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tags != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tags") + "=").Append(Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (messageId != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("messageId") + "=").Append(Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (templateId != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("templateId") + "=").Append(Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetEmailEventReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Unblock or resubscribe a transactional contact
    /// </summary>
    /// <param name="email">contact email (urlencoded) to unblock.</param>
    /// <returns>Contact unblocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task BlockedContactsAsync(string email)
    {
        return BlockedContactsAsync(email, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Unblock or resubscribe a transactional contact
    /// </summary>
    /// <param name="email">contact email (urlencoded) to unblock.</param>
    /// <returns>Contact unblocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task BlockedContactsAsync(string email, CancellationToken cancellationToken)
    {
        if (email == null)
            throw new ArgumentNullException("email");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/blockedContacts/{email}");
        urlBuilder_.Replace("{email}", Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Contact email not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of blocked or unsubscribed transactional contacts
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="senders">Comma separated list of emails of the senders from which contacts are blocked or unsubscribed</param>
    /// <returns>List of blocked or unsubscribed transactional contacts</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetTransacBlockedContacts> GetTransacBlockedContactsAsync(string startDate, string endDate, long? limit, long? offset, IEnumerable<string> senders)
    {
        return GetTransacBlockedContactsAsync(startDate, endDate, limit, offset, senders, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of blocked or unsubscribed transactional contacts
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts</param>
    /// <param name="limit">Number of documents returned per page</param>
    /// <param name="offset">Index of the first document on the page</param>
    /// <param name="senders">Comma separated list of emails of the senders from which contacts are blocked or unsubscribed</param>
    /// <returns>List of blocked or unsubscribed transactional contacts</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetTransacBlockedContacts> GetTransacBlockedContactsAsync(string startDate, string endDate, long? limit, long? offset, IEnumerable<string> senders, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/blockedContacts?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (senders != null)
        {
            foreach (var item_ in senders) { urlBuilder_.Append(Uri.EscapeDataString("senders") + "=").Append(Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetTransacBlockedContacts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of blocked domains
    /// </summary>
    /// <returns>List of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetBlockedDomains> GetBlockedDomainsAsync()
    {
        return GetBlockedDomainsAsync(CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of blocked domains
    /// </summary>
    /// <returns>List of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetBlockedDomains> GetBlockedDomainsAsync(CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/blockedDomains");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetBlockedDomains>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Add a new domain to the list of blocked domains
    /// </summary>
    /// <returns>Domain is successfully blocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task BlockNewDomainAsync(BlockDomain blockDomain)
    {
        return BlockNewDomainAsync(blockDomain, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add a new domain to the list of blocked domains
    /// </summary>
    /// <returns>Domain is successfully blocked</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task BlockNewDomainAsync(BlockDomain blockDomain, CancellationToken cancellationToken)
    {
        if (blockDomain == null)
            throw new ArgumentNullException("blockDomain");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/blockedDomains");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(blockDomain, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Unblock an existing domain from the list of blocked domains
    /// </summary>
    /// <param name="domain">The name of the domain to be deleted</param>
    /// <returns>Domain is successfully deleted from the list of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteBlockedDomainAsync(string domain)
    {
        return DeleteBlockedDomainAsync(domain, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Unblock an existing domain from the list of blocked domains
    /// </summary>
    /// <param name="domain">The name of the domain to be deleted</param>
    /// <returns>Domain is successfully deleted from the list of blocked domains</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteBlockedDomainAsync(string domain, CancellationToken cancellationToken)
    {
        if (domain == null)
            throw new ArgumentNullException("domain");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/blockedDomains/{domain}");
        urlBuilder_.Replace("{domain}", Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        string responseText_ = response_.Content == null ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("Domain not found", status_, responseText_, headers_, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete hardbounces
    /// </summary>
    /// <param name="deleteHardbounces">values to delete hardbounces</param>
    /// <returns>Hardbounces deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteHardbouncesAsync(DeleteHardbounces deleteHardbounces)
    {
        return DeleteHardbouncesAsync(deleteHardbounces, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete hardbounces
    /// </summary>
    /// <param name="deleteHardbounces">values to delete hardbounces</param>
    /// <returns>Hardbounces deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteHardbouncesAsync(DeleteHardbounces deleteHardbounces, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/deleteHardbounces");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(deleteHardbounces, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send a template
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    [Obsolete]
    public virtual Task<SendTemplateEmail> SendTemplateAsync(long templateId, SendEmail sendEmail)
    {
        return SendTemplateAsync(templateId, sendEmail, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a template
    /// </summary>
    /// <param name="templateId">Id of the template</param>
    /// <returns>Email has been sent successfully to all recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    [Obsolete]
    public virtual async Task<SendTemplateEmail> SendTemplateAsync(long templateId, SendEmail sendEmail, CancellationToken cancellationToken)
    {
        if (templateId == null)
            throw new ArgumentNullException("templateId");

        if (sendEmail == null)
            throw new ArgumentNullException("sendEmail");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smtp/templates/{templateId}/send");
        urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendEmail, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SendTemplateEmail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostSendFailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<PostSendFailed>("Email could not be sent to the following email addresses", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Template ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all the contacts
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>All contacts listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetContacts> GetContactsAsync(long? limit, long? offset, DateTime? modifiedSince, DateTime? createdSince, Sort? sort)
    {
        return GetContactsAsync(limit, offset, modifiedSince, createdSince, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the contacts
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="createdSince">Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>All contacts listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetContacts> GetContactsAsync(long? limit, long? offset, DateTime? modifiedSince, DateTime? createdSince, Sort? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (modifiedSince != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("modifiedSince") + "=").Append(Uri.EscapeDataString(modifiedSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (createdSince != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("createdSince") + "=").Append(Uri.EscapeDataString(createdSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetContacts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a contact
    /// </summary>
    /// <param name="createContact">Values to create a contact</param>
    /// <returns>Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateUpdateContactModel> CreateContactAsync(CreateContact createContact)
    {
        return CreateContactAsync(createContact, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a contact
    /// </summary>
    /// <param name="createContact">Values to create a contact</param>
    /// <returns>Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateUpdateContactModel> CreateContactAsync(CreateContact createContact, CancellationToken cancellationToken)
    {
        if (createContact == null)
            throw new ArgumentNullException("createContact");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createContact, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateUpdateContactModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 204)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateUpdateContactModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create Contact via DOI (Double-Opt-In) Flow
    /// </summary>
    /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
    /// <returns>DOI Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task CreateDoiContactAsync(CreateDoiContact createDoiContact)
    {
        return CreateDoiContactAsync(createDoiContact, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create Contact via DOI (Double-Opt-In) Flow
    /// </summary>
    /// <param name="createDoiContact">Values to create the Double opt-in (DOI) contact</param>
    /// <returns>DOI Contact created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task CreateDoiContactAsync(CreateDoiContact createDoiContact, CancellationToken cancellationToken)
    {
        if (createDoiContact == null)
            throw new ArgumentNullException("createDoiContact");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/doubleOptinConfirmation");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createDoiContact, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        return;
                    }
                    else
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a contact's details
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetExtendedContactDetails> GetContactInfoAsync(string email)
    {
        return GetContactInfoAsync(email, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a contact's details
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact OR its SMS attribute value</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetExtendedContactDetails> GetContactInfoAsync(string email, CancellationToken cancellationToken)
    {
        if (email == null)
            throw new ArgumentNullException("email");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/{email}");
        urlBuilder_.Replace("{email}", Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetExtendedContactDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Contact\'s email not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <param name="updateContact">Values to update a contact</param>
    /// <returns>Contact updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateContactAsync(string email, UpdateContact updateContact)
    {
        return UpdateContactAsync(email, updateContact, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <param name="updateContact">Values to update a contact</param>
    /// <returns>Contact updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateContactAsync(string email, UpdateContact updateContact, CancellationToken cancellationToken)
    {
        if (email == null)
            throw new ArgumentNullException("email");

        if (updateContact == null)
            throw new ArgumentNullException("updateContact");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/{email}");
        urlBuilder_.Replace("{email}", Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateContact, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Contact\'s email not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <returns>Contact deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteContactAsync(string email)
    {
        return DeleteContactAsync(email, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a contact
    /// </summary>
    /// <param name="email">Email (urlencoded) of the contact</param>
    /// <returns>Contact deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteContactAsync(string email, CancellationToken cancellationToken)
    {
        if (email == null)
            throw new ArgumentNullException("email");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/{email}");
        urlBuilder_.Replace("{email}", Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Contact not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 405)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("You\'re not allowed to delete registered email contact with SendinBlue", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get email campaigns' statistics for a contact
    /// </summary>
    /// <param name="email">Email address (urlencoded) of the contact</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate</param>
    /// <returns>Contact campaign statistics informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetContactCampaignStats> GetContactStatsAsync(string email, DateTime? startDate, DateTime? endDate)
    {
        return GetContactStatsAsync(email, startDate, endDate, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get email campaigns' statistics for a contact
    /// </summary>
    /// <param name="email">Email address (urlencoded) of the contact</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate</param>
    /// <returns>Contact campaign statistics informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetContactCampaignStats> GetContactStatsAsync(string email, DateTime? startDate, DateTime? endDate, CancellationToken cancellationToken)
    {
        if (email == null)
            throw new ArgumentNullException("email");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/{email}/campaignStats?");
        urlBuilder_.Replace("{email}", Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(startDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(endDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetContactCampaignStats>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Contact\'s email not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// List all attributes
    /// </summary>
    /// <returns>Attributes listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetAttributes> GetAttributesAsync()
    {
        return GetAttributesAsync(CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// List all attributes
    /// </summary>
    /// <returns>Attributes listed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetAttributes> GetAttributesAsync(CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/attributes");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetAttributes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the attribute</param>
    /// <param name="createAttribute">Values to create an attribute</param>
    /// <returns>Attribute created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task CreateAttributeAsync(AttributeCategory attributeCategory, string attributeName, CreateAttribute createAttribute)
    {
        return CreateAttributeAsync(attributeCategory, attributeName, createAttribute, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the attribute</param>
    /// <param name="createAttribute">Values to create an attribute</param>
    /// <returns>Attribute created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task CreateAttributeAsync(AttributeCategory attributeCategory, string attributeName, CreateAttribute createAttribute, CancellationToken cancellationToken)
    {
        if (attributeCategory == null)
            throw new ArgumentNullException("attributeCategory");

        if (attributeName == null)
            throw new ArgumentNullException("attributeName");

        if (createAttribute == null)
            throw new ArgumentNullException("createAttribute");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/attributes/{attributeCategory}/{attributeName}");
        urlBuilder_.Replace("{attributeCategory}", Uri.EscapeDataString(ConvertToString(attributeCategory, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{attributeName}", Uri.EscapeDataString(ConvertToString(attributeName, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createAttribute, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <param name="updateAttribute">Values to update an attribute</param>
    /// <returns>Attribute updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateAttributeAsync(AttributeCategory2 attributeCategory, string attributeName, UpdateAttribute updateAttribute)
    {
        return UpdateAttributeAsync(attributeCategory, attributeName, updateAttribute, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update contact attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <param name="updateAttribute">Values to update an attribute</param>
    /// <returns>Attribute updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateAttributeAsync(AttributeCategory2 attributeCategory, string attributeName, UpdateAttribute updateAttribute, CancellationToken cancellationToken)
    {
        if (attributeCategory == null)
            throw new ArgumentNullException("attributeCategory");

        if (attributeName == null)
            throw new ArgumentNullException("attributeName");

        if (updateAttribute == null)
            throw new ArgumentNullException("updateAttribute");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/attributes/{attributeCategory}/{attributeName}");
        urlBuilder_.Replace("{attributeCategory}", Uri.EscapeDataString(ConvertToString(attributeCategory, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{attributeName}", Uri.EscapeDataString(ConvertToString(attributeName, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateAttribute, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Attribute not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete an attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <returns>Attribute deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteAttributeAsync(AttributeCategory3 attributeCategory, string attributeName)
    {
        return DeleteAttributeAsync(attributeCategory, attributeName, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an attribute
    /// </summary>
    /// <param name="attributeCategory">Category of the attribute</param>
    /// <param name="attributeName">Name of the existing attribute</param>
    /// <returns>Attribute deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteAttributeAsync(AttributeCategory3 attributeCategory, string attributeName, CancellationToken cancellationToken)
    {
        if (attributeCategory == null)
            throw new ArgumentNullException("attributeCategory");

        if (attributeName == null)
            throw new ArgumentNullException("attributeName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/attributes/{attributeCategory}/{attributeName}");
        urlBuilder_.Replace("{attributeCategory}", Uri.EscapeDataString(ConvertToString(attributeCategory, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{attributeName}", Uri.EscapeDataString(ConvertToString(attributeName, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Attribute not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all folders
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetFolders> GetFoldersAsync(long limit, long offset, Sort2? sort)
    {
        return GetFoldersAsync(limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all folders
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetFolders> GetFoldersAsync(long limit, long offset, Sort2? sort, CancellationToken cancellationToken)
    {
        if (limit == null)
            throw new ArgumentNullException("limit");

        if (offset == null)
            throw new ArgumentNullException("offset");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders?");
        urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetFolders>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a folder
    /// </summary>
    /// <param name="createFolder">Name of the folder</param>
    /// <returns>Folder created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateFolderAsync(CreateUpdateFolder createFolder)
    {
        return CreateFolderAsync(createFolder, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a folder
    /// </summary>
    /// <param name="createFolder">Name of the folder</param>
    /// <returns>Folder created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateFolderAsync(CreateUpdateFolder createFolder, CancellationToken cancellationToken)
    {
        if (createFolder == null)
            throw new ArgumentNullException("createFolder");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createFolder, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all the segments
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSegments> GetSegmentsAsync(long limit, long offset, Sort3? sort)
    {
        return GetSegmentsAsync(limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the segments
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folders informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSegments> GetSegmentsAsync(long limit, long offset, Sort3? sort, CancellationToken cancellationToken)
    {
        if (limit == null)
            throw new ArgumentNullException("limit");

        if (offset == null)
            throw new ArgumentNullException("offset");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/segments?");
        urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSegments>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Returns a folder's details
    /// </summary>
    /// <param name="folderId">id of the folder</param>
    /// <returns>Folder details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetFolder> GetFolderAsync(long folderId)
    {
        return GetFolderAsync(folderId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns a folder's details
    /// </summary>
    /// <param name="folderId">id of the folder</param>
    /// <returns>Folder details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetFolder> GetFolderAsync(long folderId, CancellationToken cancellationToken)
    {
        if (folderId == null)
            throw new ArgumentNullException("folderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders/{folderId}");
        urlBuilder_.Replace("{folderId}", Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetFolder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Folder ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="updateFolder">Name of the folder</param>
    /// <returns>Folder updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder)
    {
        return UpdateFolderAsync(folderId, updateFolder, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="updateFolder">Name of the folder</param>
    /// <returns>Folder updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateFolderAsync(long folderId, CreateUpdateFolder updateFolder, CancellationToken cancellationToken)
    {
        if (folderId == null)
            throw new ArgumentNullException("folderId");

        if (updateFolder == null)
            throw new ArgumentNullException("updateFolder");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders/{folderId}");
        urlBuilder_.Replace("{folderId}", Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateFolder, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Folder ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a folder (and all its lists)
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <returns>Folder deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteFolderAsync(long folderId)
    {
        return DeleteFolderAsync(folderId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a folder (and all its lists)
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <returns>Folder deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteFolderAsync(long folderId, CancellationToken cancellationToken)
    {
        if (folderId == null)
            throw new ArgumentNullException("folderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders/{folderId}");
        urlBuilder_.Replace("{folderId}", Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Folder ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get lists in a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folder's Lists details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetFolderLists> GetFolderListsAsync(long folderId, long? limit, long? offset, Sort4? sort)
    {
        return GetFolderListsAsync(folderId, limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get lists in a folder
    /// </summary>
    /// <param name="folderId">Id of the folder</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Folder's Lists details</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetFolderLists> GetFolderListsAsync(long folderId, long? limit, long? offset, Sort4? sort, CancellationToken cancellationToken)
    {
        if (folderId == null)
            throw new ArgumentNullException("folderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/folders/{folderId}/lists?");
        urlBuilder_.Replace("{folderId}", Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture)));
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetFolderLists>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Folder ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all the lists
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Lists informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetLists> GetListsAsync(long? limit, long? offset, Sort5? sort)
    {
        return GetListsAsync(limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the lists
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Lists informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetLists> GetListsAsync(long? limit, long? offset, Sort5? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetLists>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a list
    /// </summary>
    /// <param name="createList">Values to create a list</param>
    /// <returns>List created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateListAsync(CreateList createList)
    {
        return CreateListAsync(createList, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a list
    /// </summary>
    /// <param name="createList">Values to create a list</param>
    /// <returns>List created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateListAsync(CreateList createList, CancellationToken cancellationToken)
    {
        if (createList == null)
            throw new ArgumentNullException("createList");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createList, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a list's details
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetExtendedList> GetListAsync(long listId)
    {
        return GetListAsync(listId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a list's details
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetExtendedList> GetListAsync(long listId, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetExtendedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="updateList">Values to update a list</param>
    /// <returns>List updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateListAsync(long listId, UpdateList updateList)
    {
        return UpdateListAsync(listId, updateList, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="updateList">Values to update a list</param>
    /// <returns>List updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateListAsync(long listId, UpdateList updateList, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        if (updateList == null)
            throw new ArgumentNullException("updateList");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateList, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteListAsync(long listId)
    {
        return DeleteListAsync(listId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <returns>List deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteListAsync(long listId, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get contacts in a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetContacts> GetContactsFromListAsync(long listId, DateTime? modifiedSince, long? limit, long? offset, Sort6? sort)
    {
        return GetContactsFromListAsync(listId, modifiedSince, limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get contacts in a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Contact informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetContacts> GetContactsFromListAsync(long listId, DateTime? modifiedSince, long? limit, long? offset, Sort6? sort, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}/contacts?");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
        if (modifiedSince != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("modifiedSince") + "=").Append(Uri.EscapeDataString(modifiedSince.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetContacts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Add existing contacts to a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails addresses of the contacts</param>
    /// <returns>All contacts have been added successfully to the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<PostContactInfo> AddContactToListAsync(long listId, AddContactToList contactEmails)
    {
        return AddContactToListAsync(listId, contactEmails, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add existing contacts to a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails addresses of the contacts</param>
    /// <returns>All contacts have been added successfully to the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<PostContactInfo> AddContactToListAsync(long listId, AddContactToList contactEmails, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        if (contactEmails == null)
            throw new ArgumentNullException("contactEmails");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}/contacts/add");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contactEmails, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostContactInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a contact from a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails adresses of the contact</param>
    /// <returns>All contacts have been removed successfully from the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<PostContactInfo> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails)
    {
        return RemoveContactFromListAsync(listId, contactEmails, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a contact from a list
    /// </summary>
    /// <param name="listId">Id of the list</param>
    /// <param name="contactEmails">Emails adresses of the contact</param>
    /// <returns>All contacts have been removed successfully from the list with details of failed ones</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<PostContactInfo> RemoveContactFromListAsync(long listId, RemoveContactFromList contactEmails, CancellationToken cancellationToken)
    {
        if (listId == null)
            throw new ArgumentNullException("listId");

        if (contactEmails == null)
            throw new ArgumentNullException("contactEmails");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/lists/{listId}/contacts/remove");
        urlBuilder_.Replace("{listId}", Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(contactEmails, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostContactInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("List ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Export contacts
    /// </summary>
    /// <param name="requestContactExport">Values to request a contact export</param>
    /// <returns>Contact export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreatedProcessId> RequestContactExportAsync(RequestContactExport requestContactExport)
    {
        return RequestContactExportAsync(requestContactExport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export contacts
    /// </summary>
    /// <param name="requestContactExport">Values to request a contact export</param>
    /// <returns>Contact export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreatedProcessId> RequestContactExportAsync(RequestContactExport requestContactExport, CancellationToken cancellationToken)
    {
        if (requestContactExport == null)
            throw new ArgumentNullException("requestContactExport");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/export");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestContactExport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 202)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreatedProcessId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Import contacts
    /// </summary>
    /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``</param>
    /// <returns>Contact import request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreatedProcessId> ImportContactsAsync(RequestContactImport requestContactImport)
    {
        return ImportContactsAsync(requestContactImport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Import contacts
    /// </summary>
    /// <param name="requestContactImport">Values to import contacts in Sendinblue. To know more about the expected format, please have a look at ``https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``</param>
    /// <returns>Contact import request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreatedProcessId> ImportContactsAsync(RequestContactImport requestContactImport, CancellationToken cancellationToken)
    {
        if (requestContactImport == null)
            throw new ArgumentNullException("requestContactImport");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("contacts/import");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestContactImport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 202)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreatedProcessId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Returns the information for all your created SMS campaigns
    /// </summary>
    /// <param name="status">Status of campaign.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>SMS campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSmsCampaigns> GetSmsCampaignsAsync(Status2? status, DateTime? startDate, DateTime? endDate, long? limit, long? offset)
    {
        return GetSmsCampaignsAsync(status, startDate, endDate, limit, offset, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Returns the information for all your created SMS campaigns
    /// </summary>
    /// <param name="status">Status of campaign.</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )</param>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>SMS campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSmsCampaigns> GetSmsCampaignsAsync(Status2? status, DateTime? startDate, DateTime? endDate, long? limit, long? offset, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns?");
        if (status != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("status") + "=").Append(Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSmsCampaigns>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Creates an SMS campaign
    /// </summary>
    /// <param name="createSmsCampaign">Values to create an SMS Campaign</param>
    /// <returns>SMS campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateSmsCampaignAsync(CreateSmsCampaign createSmsCampaign)
    {
        return CreateSmsCampaignAsync(createSmsCampaign, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Creates an SMS campaign
    /// </summary>
    /// <param name="createSmsCampaign">Values to create an SMS Campaign</param>
    /// <returns>SMS campaign created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateSmsCampaignAsync(CreateSmsCampaign createSmsCampaign, CancellationToken cancellationToken)
    {
        if (createSmsCampaign == null)
            throw new ArgumentNullException("createSmsCampaign");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createSmsCampaign, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSmsCampaign> GetSmsCampaignAsync(long campaignId)
    {
        return GetSmsCampaignAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSmsCampaign> GetSmsCampaignAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSmsCampaign>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <param name="updateSmsCampaign">Values to update an SMS Campaign</param>
    /// <returns>SMS campaign updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateSmsCampaignAsync(long campaignId, UpdateSmsCampaign updateSmsCampaign)
    {
        return UpdateSmsCampaignAsync(campaignId, updateSmsCampaign, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <param name="updateSmsCampaign">Values to update an SMS Campaign</param>
    /// <returns>SMS campaign updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateSmsCampaignAsync(long campaignId, UpdateSmsCampaign updateSmsCampaign, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (updateSmsCampaign == null)
            throw new ArgumentNullException("updateSmsCampaign");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateSmsCampaign, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteSmsCampaignAsync(long campaignId)
    {
        return DeleteSmsCampaignAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete an SMS campaign
    /// </summary>
    /// <param name="campaignId">id of the SMS campaign</param>
    /// <returns>SMS campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteSmsCampaignAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send your SMS campaign immediately
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>SMS campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendSmsCampaignNowAsync(long campaignId)
    {
        return SendSmsCampaignNowAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send your SMS campaign immediately
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>SMS campaign has been scheduled</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendSmsCampaignNowAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}/sendNow");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Content = new StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("SMS Campaign could not be sent", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 402)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("You don\'t have enough credit to send your campaign. Please update your plan", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a campaign's status
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="status">Status of the campaign.</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateSmsCampaignStatusAsync(long campaignId, UpdateCampaignStatus status)
    {
        return UpdateSmsCampaignStatusAsync(campaignId, status, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a campaign's status
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="status">Status of the campaign.</param>
    /// <returns>The campaign status has been updated successfully</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateSmsCampaignStatusAsync(long campaignId, UpdateCampaignStatus status, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (status == null)
            throw new ArgumentNullException("status");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}/status");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(status, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send a test SMS campaign
    /// </summary>
    /// <param name="campaignId">Id of the SMS campaign</param>
    /// <param name="phoneNumber">Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted</param>
    /// <returns>Test SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendTestSmsAsync(long campaignId, SendTestSms phoneNumber)
    {
        return SendTestSmsAsync(campaignId, phoneNumber, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send a test SMS campaign
    /// </summary>
    /// <param name="campaignId">Id of the SMS campaign</param>
    /// <param name="phoneNumber">Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted</param>
    /// <returns>Test SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendTestSmsAsync(long campaignId, SendTestSms phoneNumber, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (phoneNumber == null)
            throw new ArgumentNullException("phoneNumber");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}/sendTest");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(phoneNumber, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<PostSendSmsTestFailed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<PostSendSmsTestFailed>("Test SMS could not be sent to the following email addresses", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Export an SMS campaign's recipients
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreatedProcessId> RequestSmsRecipientExportAsync(long campaignId, RequestSmsRecipientExport recipientExport)
    {
        return RequestSmsRecipientExportAsync(campaignId, recipientExport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Export an SMS campaign's recipients
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="recipientExport">Values to send for a recipient export request</param>
    /// <returns>Recipient export request has been accepted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreatedProcessId> RequestSmsRecipientExportAsync(long campaignId, RequestSmsRecipientExport recipientExport, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}/exportRecipients");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(recipientExport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 202)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreatedProcessId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send an SMS campaign's report
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task SendSmsReportAsync(long campaignId, SendReport sendReport)
    {
        return SendSmsReportAsync(campaignId, sendReport, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send an SMS campaign's report
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <param name="sendReport">Values for send a report</param>
    /// <returns>Report has been successfully sent to the defined recipients</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task SendSmsReportAsync(long campaignId, SendReport sendReport, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        if (sendReport == null)
            throw new ArgumentNullException("sendReport");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("smsCampaigns/{campaignId}/sendReport");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendReport, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Send SMS message to a mobile number
    /// </summary>
    /// <param name="sendTransacSms">Values to send a transactional SMS</param>
    /// <returns>SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<SendSms> SendTransacSmsAsync(SendTransacSms sendTransacSms)
    {
        return SendTransacSmsAsync(sendTransacSms, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Send SMS message to a mobile number
    /// </summary>
    /// <param name="sendTransacSms">Values to send a transactional SMS</param>
    /// <returns>SMS has been sent successfully to the recipient</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<SendSms> SendTransacSmsAsync(SendTransacSms sendTransacSms, CancellationToken cancellationToken)
    {
        if (sendTransacSms == null)
            throw new ArgumentNullException("sendTransacSms");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("transactionalSMS/sms");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sendTransacSms, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<SendSms>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 402)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("You don\'t have enough credit to send your SMS. Please update your plan", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get your SMS activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate</param>
    /// <param name="tag">Filter on a tag</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetTransacAggregatedSmsReport> GetTransacAggregatedSmsReportAsync(string startDate, string endDate, int? days, string tag)
    {
        return GetTransacAggregatedSmsReportAsync(startDate, endDate, days, tag, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your SMS activity aggregated over a period of time
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with startDate and endDate</param>
    /// <param name="tag">Filter on a tag</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetTransacAggregatedSmsReport> GetTransacAggregatedSmsReportAsync(string startDate, string endDate, int? days, string tag, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("transactionalSMS/statistics/aggregatedReport?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tag != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tag") + "=").Append(Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetTransacAggregatedSmsReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get your SMS activity aggregated per day
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Filter on a tag</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetTransacSmsReport> GetTransacSmsReportAsync(string startDate, string endDate, int? days, string tag, Sort7? sort)
    {
        return GetTransacSmsReportAsync(startDate, endDate, days, tag, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your SMS activity aggregated per day
    /// </summary>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="tag">Filter on a tag</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Aggregated SMS report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetTransacSmsReport> GetTransacSmsReportAsync(string startDate, string endDate, int? days, string tag, Sort7? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("transactionalSMS/statistics/reports?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tag != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tag") + "=").Append(Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetTransacSmsReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all your SMS activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="phoneNumber">Filter the report for a specific phone number</param>
    /// <param name="event">Filter the report for specific events</param>
    /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Sms events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSmsEventReport> GetSmsEventsAsync(long? limit, string startDate, string endDate, long? offset, int? days, string phoneNumber, Event2? @event, string tags, Sort8? sort)
    {
        return GetSmsEventsAsync(limit, startDate, endDate, offset, days, phoneNumber, @event, tags, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all your SMS activity (unaggregated events)
    /// </summary>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="startDate">Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report</param>
    /// <param name="endDate">Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report</param>
    /// <param name="offset">Index of the first document of the page</param>
    /// <param name="days">Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate'</param>
    /// <param name="phoneNumber">Filter the report for a specific phone number</param>
    /// <param name="event">Filter the report for specific events</param>
    /// <param name="tags">Filter the report for specific tags passed as a serialized urlencoded array</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record creation</param>
    /// <returns>Sms events report informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSmsEventReport> GetSmsEventsAsync(long? limit, string startDate, string endDate, long? offset, int? days, string phoneNumber, Event2? @event, string tags, Sort8? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("transactionalSMS/statistics/events?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (days != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("days") + "=").Append(Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (phoneNumber != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("phoneNumber") + "=").Append(Uri.EscapeDataString(ConvertToString(phoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (@event != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("event") + "=").Append(Uri.EscapeDataString(ConvertToString(@event, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (tags != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("tags") + "=").Append(Uri.EscapeDataString(ConvertToString(tags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSmsEventReport>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Get WhatsApp campaign information on the basis of campaignId</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetWhatsappCampaignOverview> GetWhatsAppCampaignAsync(long campaignId)
    {
        return GetWhatsAppCampaignAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">Id of the campaign</param>
    /// <returns>Get WhatsApp campaign information on the basis of campaignId</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetWhatsappCampaignOverview> GetWhatsAppCampaignAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("whatsappCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetWhatsappCampaignOverview>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign Id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>WhatsApp campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteWhatsAppCampaignAsync(long campaignId)
    {
        return DeleteWhatsAppCampaignAsync(campaignId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a WhatsApp campaign
    /// </summary>
    /// <param name="campaignId">id of the campaign</param>
    /// <returns>WhatsApp campaign has been deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteWhatsAppCampaignAsync(long campaignId, CancellationToken cancellationToken)
    {
        if (campaignId == null)
            throw new ArgumentNullException("campaignId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("whatsappCampaigns/{campaignId}");
        urlBuilder_.Replace("{campaignId}", Uri.EscapeDataString(ConvertToString(campaignId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Campaign Id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Return all your created WhatsApp templates
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetWATemplates> GetWhatsAppTemplatesAsync(string startDate, string endDate, long? limit, long? offset, Sort9? sort)
    {
        return GetWhatsAppTemplatesAsync(startDate, endDate, limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created WhatsApp templates
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp templates informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetWATemplates> GetWhatsAppTemplatesAsync(string startDate, string endDate, long? limit, long? offset, Sort9? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("whatsappCampaigns/template-list?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetWATemplates>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Return all your created WhatsApp campaigns
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetWhatsappCampaigns> GetWhatsAppCampaignsAsync(string startDate, string endDate, long? limit, long? offset, Sort10? sort)
    {
        return GetWhatsAppCampaignsAsync(startDate, endDate, limit, offset, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all your created WhatsApp campaigns
    /// </summary>
    /// <param name="startDate">**Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="endDate">**Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created.
    /// <br/>**Prefer to pass your timezone in date-time format for accurate result**</param>
    /// <param name="limit">Number of documents per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <param name="sort">Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed</param>
    /// <returns>WhatsApp campaigns informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetWhatsappCampaigns> GetWhatsAppCampaignsAsync(string startDate, string endDate, long? limit, long? offset, Sort10? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("whatsappCampaigns?");
        if (startDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("startDate") + "=").Append(Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (endDate != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("endDate") + "=").Append(Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetWhatsappCampaigns>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of all your senders
    /// </summary>
    /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only)</param>
    /// <param name="domain">Filter your senders for a specific domain</param>
    /// <returns>list of senders</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSendersList> GetSendersAsync(string ip, string domain)
    {
        return GetSendersAsync(ip, domain, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of all your senders
    /// </summary>
    /// <param name="ip">Filter your senders for a specific ip (available for dedicated IP usage only)</param>
    /// <param name="domain">Filter your senders for a specific domain</param>
    /// <returns>list of senders</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSendersList> GetSendersAsync(string ip, string domain, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders?");
        if (ip != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("ip") + "=").Append(Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (domain != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("domain") + "=").Append(Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSendersList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a new sender
    /// </summary>
    /// <param name="sender">sender's name</param>
    /// <returns>sender created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateSenderModel> CreateSenderAsync(CreateSender sender)
    {
        return CreateSenderAsync(sender, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a new sender
    /// </summary>
    /// <param name="sender">sender's name</param>
    /// <returns>sender created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateSenderModel> CreateSenderAsync(CreateSender sender, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sender, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateSenderModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <param name="sender">sender's name</param>
    /// <returns>sender updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateSenderAsync(long senderId, UpdateSender sender)
    {
        return UpdateSenderAsync(senderId, sender, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <param name="sender">sender's name</param>
    /// <returns>sender updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateSenderAsync(long senderId, UpdateSender sender, CancellationToken cancellationToken)
    {
        if (senderId == null)
            throw new ArgumentNullException("senderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders/{senderId}");
        urlBuilder_.Replace("{senderId}", Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(sender, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Sender ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>sender deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteSenderAsync(long senderId)
    {
        return DeleteSenderAsync(senderId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>sender deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteSenderAsync(long senderId, CancellationToken cancellationToken)
    {
        if (senderId == null)
            throw new ArgumentNullException("senderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders/{senderId}");
        urlBuilder_.Replace("{senderId}", Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Sender ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all the dedicated IPs for a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetIpsFromSender> GetIpsFromSenderAsync(long senderId)
    {
        return GetIpsFromSenderAsync(senderId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the dedicated IPs for a sender
    /// </summary>
    /// <param name="senderId">Id of the sender</param>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetIpsFromSender> GetIpsFromSenderAsync(long senderId, CancellationToken cancellationToken)
    {
        if (senderId == null)
            throw new ArgumentNullException("senderId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders/{senderId}/ips");
        urlBuilder_.Replace("{senderId}", Uri.EscapeDataString(ConvertToString(senderId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetIpsFromSender>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Sender ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all the dedicated IPs for your account
    /// </summary>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetIps> GetIpsAsync()
    {
        return GetIpsAsync(CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all the dedicated IPs for your account
    /// </summary>
    /// <returns>list of dedicated IPs</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetIps> GetIpsAsync(CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("senders/ips");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetIps>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a webhook
    /// </summary>
    /// <param name="createWebhook">Values to create a webhook</param>
    /// <returns>Webhook created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateModel> CreateWebhookAsync(CreateWebhook createWebhook)
    {
        return CreateWebhookAsync(createWebhook, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a webhook
    /// </summary>
    /// <param name="createWebhook">Values to create a webhook</param>
    /// <returns>Webhook created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateModel> CreateWebhookAsync(CreateWebhook createWebhook, CancellationToken cancellationToken)
    {
        if (createWebhook == null)
            throw new ArgumentNullException("createWebhook");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("webhooks");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createWebhook, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all webhooks
    /// </summary>
    /// <param name="type">Filter on webhook type</param>
    /// <param name="sort">Sort the results in the ascending/descending order of webhook creation</param>
    /// <returns>Webhooks informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetWebhooks> GetWebhooksAsync(Type2? type, Sort11? sort)
    {
        return GetWebhooksAsync(type, sort, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all webhooks
    /// </summary>
    /// <param name="type">Filter on webhook type</param>
    /// <param name="sort">Sort the results in the ascending/descending order of webhook creation</param>
    /// <returns>Webhooks informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetWebhooks> GetWebhooksAsync(Type2? type, Sort11? sort, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("webhooks?");
        if (type != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("type") + "=").Append(Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (sort != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("sort") + "=").Append(Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetWebhooks>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a webhook details
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetWebhook> GetWebhookAsync(long webhookId)
    {
        return GetWebhookAsync(webhookId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a webhook details
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetWebhook> GetWebhookAsync(long webhookId, CancellationToken cancellationToken)
    {
        if (webhookId == null)
            throw new ArgumentNullException("webhookId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("webhooks/{webhookId}");
        urlBuilder_.Replace("{webhookId}", Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetWebhook>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Webhook ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <param name="updateWebhook">Values to update a webhook</param>
    /// <returns>Webhook updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateWebhookAsync(long webhookId, UpdateWebhook updateWebhook)
    {
        return UpdateWebhookAsync(webhookId, updateWebhook, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <param name="updateWebhook">Values to update a webhook</param>
    /// <returns>Webhook updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateWebhookAsync(long webhookId, UpdateWebhook updateWebhook, CancellationToken cancellationToken)
    {
        if (webhookId == null)
            throw new ArgumentNullException("webhookId");

        if (updateWebhook == null)
            throw new ArgumentNullException("updateWebhook");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("webhooks/{webhookId}");
        urlBuilder_.Replace("{webhookId}", Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateWebhook, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Webhook ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteWebhookAsync(long webhookId)
    {
        return DeleteWebhookAsync(webhookId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a webhook
    /// </summary>
    /// <param name="webhookId">Id of the webhook</param>
    /// <returns>Webhook deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteWebhookAsync(long webhookId, CancellationToken cancellationToken)
    {
        if (webhookId == null)
            throw new ArgumentNullException("webhookId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("webhooks/{webhookId}");
        urlBuilder_.Replace("{webhookId}", Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Webhook ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the list of all children accounts
    /// </summary>
    /// <param name="limit">Number of documents for child accounts information per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>list of children</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetChildrenList> GetResellerChildsAsync(long? limit, long? offset)
    {
        return GetResellerChildsAsync(limit, offset, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the list of all children accounts
    /// </summary>
    /// <param name="limit">Number of documents for child accounts information per page</param>
    /// <param name="offset">Index of the first document in the page</param>
    /// <returns>list of children</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetChildrenList> GetResellerChildsAsync(long? limit, long? offset, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetChildrenList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Creates a reseller child
    /// </summary>
    /// <param name="resellerChild">reseller child to add</param>
    /// <returns>child created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<CreateReseller> CreateResellerChildAsync(CreateChild resellerChild)
    {
        return CreateResellerChildAsync(resellerChild, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Creates a reseller child
    /// </summary>
    /// <param name="resellerChild">reseller child to add</param>
    /// <returns>child created</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<CreateReseller> CreateResellerChildAsync(CreateChild resellerChild, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(resellerChild, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<CreateReseller>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get a child account's details
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Information for the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetChildInfo> GetChildInfoAsync(string childIdentifier)
    {
        return GetChildInfoAsync(childIdentifier, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get a child account's details
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Information for the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetChildInfo> GetChildInfoAsync(string childIdentifier, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetChildInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update info of reseller's child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="resellerChild">values to update in child profile</param>
    /// <returns>reseller's child updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateResellerChildAsync(string childIdentifier, UpdateChild resellerChild)
    {
        return UpdateResellerChildAsync(childIdentifier, resellerChild, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update info of reseller's child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="resellerChild">values to update in child profile</param>
    /// <returns>reseller's child updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateResellerChildAsync(string childIdentifier, UpdateChild resellerChild, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (resellerChild == null)
            throw new ArgumentNullException("resellerChild");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(resellerChild, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete a single reseller child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or child id of reseller's child</param>
    /// <returns>child deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteResellerChildAsync(string childIdentifier)
    {
        return DeleteResellerChildAsync(childIdentifier, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete a single reseller child based on the child identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or child id of reseller's child</param>
    /// <returns>child deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteResellerChildAsync(string childIdentifier, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update info of reseller's child account status based on the identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="updateChildAccountStatus">values to update in child account status</param>
    /// <returns>reseller's child account status updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateChildAccountStatusAsync(string childIdentifier, UpdateChildAccountStatus updateChildAccountStatus)
    {
        return UpdateChildAccountStatusAsync(childIdentifier, updateChildAccountStatus, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update info of reseller's child account status based on the identifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="updateChildAccountStatus">values to update in child account status</param>
    /// <returns>reseller's child account status updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateChildAccountStatusAsync(string childIdentifier, UpdateChildAccountStatus updateChildAccountStatus, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (updateChildAccountStatus == null)
            throw new ArgumentNullException("updateChildAccountStatus");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/accountStatus");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateChildAccountStatus, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>status of reseller's child account</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync(string childIdentifier)
    {
        return GetChildAccountCreationStatusAsync(childIdentifier, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>status of reseller's child account</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync(string childIdentifier, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/accountCreationStatus");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetChildAccountCreationStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Associate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to associate</param>
    /// <returns>Dedicated IP is associated to the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task AssociateIpToChildAsync(string childIdentifier, ManageIp ip)
    {
        return AssociateIpToChildAsync(childIdentifier, ip, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Associate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to associate</param>
    /// <returns>Dedicated IP is associated to the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task AssociateIpToChildAsync(string childIdentifier, ManageIp ip, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (ip == null)
            throw new ArgumentNullException("ip");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/ips/associate");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ip, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Dissociate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to dissociate</param>
    /// <returns>Dedicated IP is dissociated from the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DissociateIpFromChildAsync(string childIdentifier, ManageIp ip)
    {
        return DissociateIpFromChildAsync(childIdentifier, ip, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Dissociate a dedicated IP to the child
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="ip">IP to dissociate</param>
    /// <returns>Dedicated IP is dissociated from the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DissociateIpFromChildAsync(string childIdentifier, ManageIp ip, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (ip == null)
            throw new ArgumentNullException("ip");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/ips/dissociate");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ip, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Add Email and/or SMS credits to a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addCredits">Values to post to add credit to a specific child account</param>
    /// <returns>Credits added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<RemainingCreditModel> AddCreditsAsync(string childIdentifier, AddCredits addCredits)
    {
        return AddCreditsAsync(childIdentifier, addCredits, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Add Email and/or SMS credits to a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addCredits">Values to post to add credit to a specific child account</param>
    /// <returns>Credits added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<RemainingCreditModel> AddCreditsAsync(string childIdentifier, AddCredits addCredits, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (addCredits == null)
            throw new ArgumentNullException("addCredits");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/credits/add");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(addCredits, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<RemainingCreditModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Remove Email and/or SMS credits from a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
    /// <returns>Credits removed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<RemainingCreditModel> RemoveCreditsAsync(string childIdentifier, RemoveCredits removeCredits)
    {
        return RemoveCreditsAsync(childIdentifier, removeCredits, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Remove Email and/or SMS credits from a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
    /// <returns>Credits removed</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<RemainingCreditModel> RemoveCreditsAsync(string childIdentifier, RemoveCredits removeCredits, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (removeCredits == null)
            throw new ArgumentNullException("removeCredits");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/credits/remove");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(removeCredits, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<RemainingCreditModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get all sender domains for a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Sender domains of the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<ICollection<Anonymous>> GetChildDomainsAsync(string childIdentifier)
    {
        return GetChildDomainsAsync(childIdentifier, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get all sender domains for a specific child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Sender domains of the child</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<ICollection<Anonymous>> GetChildDomainsAsync(string childIdentifier, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/domains");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Create a domain for a child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
    /// <returns>Domain added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task CreateChildDomainAsync(string childIdentifier, AddChildDomain addChildDomain)
    {
        return CreateChildDomainAsync(childIdentifier, addChildDomain, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Create a domain for a child account
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
    /// <returns>Domain added</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task CreateChildDomainAsync(string childIdentifier, AddChildDomain addChildDomain, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (addChildDomain == null)
            throw new ArgumentNullException("addChildDomain");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/domains");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(addChildDomain, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 201)
                    {
                        return;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Update the sender domain of reseller's child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be updated</param>
    /// <param name="updateChildDomain">value to update for sender domain</param>
    /// <returns>reseller's child domain updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task UpdateChildDomainAsync(string childIdentifier, string domainName, UpdateChildDomain updateChildDomain)
    {
        return UpdateChildDomainAsync(childIdentifier, domainName, updateChildDomain, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Update the sender domain of reseller's child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be updated</param>
    /// <param name="updateChildDomain">value to update for sender domain</param>
    /// <returns>reseller's child domain updated</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task UpdateChildDomainAsync(string childIdentifier, string domainName, UpdateChildDomain updateChildDomain, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (domainName == null)
            throw new ArgumentNullException("domainName");

        if (updateChildDomain == null)
            throw new ArgumentNullException("updateChildDomain");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/domains/{domainName}");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{domainName}", Uri.EscapeDataString(ConvertToString(domainName, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateChildDomain, _settings.Value));
                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                request_.Content = content_;
                request_.Method = new HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
    /// <returns>child domain deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task DeleteChildDomainAsync(string childIdentifier, string domainName)
    {
        return DeleteChildDomainAsync(childIdentifier, domainName, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
    /// <returns>child domain deleted</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task DeleteChildDomainAsync(string childIdentifier, string domainName, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        if (domainName == null)
            throw new ArgumentNullException("domainName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/domains/{domainName}");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{domainName}", Uri.EscapeDataString(ConvertToString(domainName, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 204)
                    {
                        return;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get session token to access Sendinblue (SSO)
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Session token</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetSsoToken> GetSsoTokenAsync(string childIdentifier)
    {
        return GetSsoTokenAsync(childIdentifier, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get session token to access Sendinblue (SSO)
    /// </summary>
    /// <param name="childIdentifier">Either auth key or id of reseller's child</param>
    /// <returns>Session token</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetSsoToken> GetSsoTokenAsync(string childIdentifier, CancellationToken cancellationToken)
    {
        if (childIdentifier == null)
            throw new ArgumentNullException("childIdentifier");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("reseller/children/{childIdentifier}/auth");
        urlBuilder_.Replace("{childIdentifier}", Uri.EscapeDataString(ConvertToString(childIdentifier, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetSsoToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 403)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Current account is not a reseller", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Child auth key or child id not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Get your account information, plan and credits details
    /// </summary>
    /// <returns>account informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetAccount> GetAccountAsync()
    {
        return GetAccountAsync(CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Get your account information, plan and credits details
    /// </summary>
    /// <returns>account informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetAccount> GetAccountAsync(CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("account");

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Return all the processes for your account
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>processes informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetProcesses> GetProcessesAsync(long? limit, long? offset)
    {
        return GetProcessesAsync(limit, offset, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return all the processes for your account
    /// </summary>
    /// <param name="limit">Number limitation for the result returned</param>
    /// <param name="offset">Beginning point in the list to retrieve from.</param>
    /// <returns>processes informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetProcesses> GetProcessesAsync(long? limit, long? offset, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("processes?");
        if (limit != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("limit") + "=").Append(Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        if (offset != null)
        {
            urlBuilder_.Append(Uri.EscapeDataString("offset") + "=").Append(Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
        }
        urlBuilder_.Length--;

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetProcesses>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    /// <summary>
    /// Return the informations for a process
    /// </summary>
    /// <param name="processId">Id of the process</param>
    /// <returns>process informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<GetProcess> GetProcessAsync(long processId)
    {
        return GetProcessAsync(processId, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// Return the informations for a process
    /// </summary>
    /// <param name="processId">Id of the process</param>
    /// <returns>process informations</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<GetProcess> GetProcessAsync(long processId, CancellationToken cancellationToken)
    {
        if (processId == null)
            throw new ArgumentNullException("processId");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append("processes/{processId}");
        urlBuilder_.Replace("{processId}", Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        var disposeClient_ = false;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new HttpMethod("GET");
                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);

                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse_ = true;
                try
                {
                    var headers_ = response_.Headers.ToDictionary(h_ => h_.Key, h_ => h_.Value);
                    if (response_.Content != null && response_.Content.Headers != null)
                    {
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
                    }

                    ProcessResponse(client_, response_);

                    var status_ = (int)response_.StatusCode;
                    if (status_ == 200)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<GetProcess>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        return objectResponse_.Object;
                    }
                    else
                    if (status_ == 404)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("Process ID not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    if (status_ == 400)
                    {
                        var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                        if (objectResponse_.Object == null)
                        {
                            throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                        }
                        throw new ApiException<ErrorModel>("bad request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                    }
                    else
                    {
                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                    }
                }
                finally
                {
                    if (disposeResponse_)
                        response_.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient_)
                client_.Dispose();
        }
    }

    protected struct ObjectResponseResult<T>
    {
        public ObjectResponseResult(T responseObject, string responseText)
        {
            Object = responseObject;
            Text = responseText;
        }

        public T Object { get; }

        public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
    {
        if (response == null || response.Content == null)
        {
            return new ObjectResponseResult<T>(default, string.Empty);
        }

        if (ReadResponseAsString)
        {
            var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            try
            {
                var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                return new ObjectResponseResult<T>(typedBody, responseText);
            }
            catch (Newtonsoft.Json.JsonException exception)
            {
                var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
            }
        }
        else
        {
            try
            {
                using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                using (var streamReader = new StreamReader(responseStream))
                using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                {
                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                    var typedBody = serializer.Deserialize<T>(jsonTextReader);
                    return new ObjectResponseResult<T>(typedBody, string.Empty);
                }
            }
            catch (Newtonsoft.Json.JsonException exception)
            {
                var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
            }
        }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
        if (value == null)
        {
            return "";
        }

        if (value is Enum)
        {
            var name = Enum.GetName(value.GetType(), value);
            if (name != null)
            {
                var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                if (field != null)
                {
                    var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                        as System.Runtime.Serialization.EnumMemberAttribute;
                    if (attribute != null)
                    {
                        return attribute.Value != null ? attribute.Value : name;
                    }
                }

                var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                return converted == null ? string.Empty : converted;
            }
        }
        else if (value is bool)
        {
            return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
        }
        else if (value is byte[])
        {
            return Convert.ToBase64String((byte[])value);
        }
        else if (value.GetType().IsArray)
        {
            var array = ((Array)value).OfType<object>();
            return string.Join(",", array.Select(o => ConvertToString(o, cultureInfo)));
        }

        var result = Convert.ToString(value, cultureInfo);
        return result == null ? "" : result;
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetAccount : GetExtendedClient
{
    /// <summary>
    /// Information about your plans and credits
    /// </summary>
    [Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Plan> Plan { get; set; } = new System.Collections.ObjectModel.Collection<Plan>();

    /// <summary>
    /// Information about your transactional email account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relay", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Relay Relay { get; set; } = new Relay();

    [Newtonsoft.Json.JsonProperty("marketingAutomation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public MarketingAutomation MarketingAutomation { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetChildrenList
{
    /// <summary>
    /// Your children's account information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Children> Children { get; set; }

    /// <summary>
    /// Number of child accounts
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetChildInfo : GetClient
{
    /// <summary>
    /// Credits available for your child
    /// </summary>
    [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Credits Credits { get; set; }

    /// <summary>
    /// Statistics about your child account activity
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Statistics3 Statistics { get; set; }

    /// <summary>
    /// The encrypted password of child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Password { get; set; }

    /// <summary>
    /// IP(s) associated to a child account user
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Ips { get; set; }

    /// <summary>
    /// API Keys associated to child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("apiKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ApiKeys ApiKeys { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetChildAccountCreationStatus
{
    /// <summary>
    /// Status of child account creation whether it is successfully created (exists) or not.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("childAccountCreated", Required = Newtonsoft.Json.Required.Always)]
    public bool ChildAccountCreated { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetChildDomains : System.Collections.ObjectModel.Collection<Anonymous>
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSsoToken
{
    /// <summary>
    /// Session token. It will remain valid for a short period of time only.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Token { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetChildDomain
{
    /// <summary>
    /// Sender domain
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

    /// <summary>
    /// indicates whether a domain is verified or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
    public bool Active { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetClient
{
    /// <summary>
    /// Login Email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// First Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string FirstName { get; set; }

    /// <summary>
    /// Last Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string LastName { get; set; }

    /// <summary>
    /// Name of the company
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CompanyName { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetExtendedClient : GetClient
{
    /// <summary>
    /// Address informations
    /// </summary>
    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Address Address { get; set; } = new Address();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSendersList
{
    /// <summary>
    /// List of the senders available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("senders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Senders> Senders { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateChild
{
    /// <summary>
    /// Email address to create the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// First name to use to create the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string FirstName { get; set; }

    /// <summary>
    /// Last name to use to create the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string LastName { get; set; }

    /// <summary>
    /// Company name to use to create the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CompanyName { get; set; }

    /// <summary>
    /// Password for the child account to login
    /// </summary>
    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Password { get; set; }

    /// <summary>
    /// Language of the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateChildLanguage? Language { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateSender
{
    /// <summary>
    /// From Name to use for the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// From email to use for the sender. A verification email will be sent to this address.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Mandatory in case of dedicated IP, IPs to associate to the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Ips> Ips { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateSender
{
    /// <summary>
    /// From Name to update the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// From Email to update the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Only in case of dedicated IP, IPs to associate to the sender. If passed, will replace all the existing IPs.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Ips2> Ips { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateChild
{
    /// <summary>
    /// New Email address to update the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// New First name to use to update the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FirstName { get; set; }

    /// <summary>
    /// New Last name to use to update the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastName { get; set; }

    /// <summary>
    /// New Company name to use to update the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CompanyName { get; set; }

    /// <summary>
    /// New password for the child account to login
    /// </summary>
    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Password { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateChildAccountStatus
{
    /// <summary>
    /// Status of Transactional Email Platform activation for your account (true=enabled, false=disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("transactionalEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? TransactionalEmail { get; set; }

    /// <summary>
    /// Status of Transactional SMS Platform activation for your account (true=enabled, false=disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("transactionalSms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? TransactionalSms { get; set; }

    /// <summary>
    /// Status of Marketing Automation Platform activation for your account (true=enabled, false=disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("marketingAutomation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MarketingAutomation { get; set; }

    /// <summary>
    /// Status of SMS Campaign Platform activation for your account (true=enabled, false=disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SmsCampaign { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ErrorModel
{
    /// <summary>
    /// Error code displayed in case of a failure
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ErrorModelCode Code { get; set; }

    /// <summary>
    /// Readable message associated to the failure
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Message { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RemainingCreditModel
{
    /// <summary>
    /// Credits remaining for child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("child", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Child Child { get; set; } = new Child();

    [Newtonsoft.Json.JsonProperty("reseller", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Reseller Reseller { get; set; } = new Reseller();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AddCredits
{
    /// <summary>
    /// Required if email credits are empty. SMS credits to be added to the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Sms { get; set; }

    /// <summary>
    /// Required if sms credits are empty. Email credits to be added to the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Email { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RemoveCredits
{
    /// <summary>
    /// Required if email credits are empty. SMS credits to be removed from the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Sms { get; set; }

    /// <summary>
    /// Required if sms credits are empty. Email credits to be removed from the child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Email { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AddChildDomain
{
    /// <summary>
    /// Sender domain to add for a specific child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Domain { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateChildDomain
{
    /// <summary>
    /// Value for the sender domain that will replace the existing domain
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Domain { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetProcesses
{
    /// <summary>
    /// List of processes available on your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("processes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<GetProcess> Processes { get; set; }

    /// <summary>
    /// Number of processes available on your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetProcess
{
    /// <summary>
    /// Id of the process
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Status of the process
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetProcessStatus Status { get; set; }

    /// <summary>
    /// Process name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// URL on which send export the of contacts once the process is completed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("export_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Export_url { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetEmailCampaigns
{
    [Newtonsoft.Json.JsonProperty("campaigns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Campaigns> Campaigns { get; set; }

    /// <summary>
    /// Number of Email campaigns retrieved
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmsCampaigns
{
    [Newtonsoft.Json.JsonProperty("campaigns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Campaigns2> Campaigns { get; set; }

    /// <summary>
    /// Number of SMS campaigns retrieved
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmsCampaign : GetSmsCampaignOverview
{
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Recipients Recipients { get; set; } = new Recipients();

    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Statistics4 Statistics { get; set; } = new Statistics4();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetEmailCampaign : GetExtendedCampaignOverview
{
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Recipients2 Recipients { get; set; } = new Recipients2();

    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Statistics5 Statistics { get; set; } = new Statistics5();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetCampaignOverview
{
    /// <summary>
    /// ID of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Type of campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetCampaignOverviewType Type { get; set; }

    /// <summary>
    /// Status of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetCampaignOverviewStatus Status { get; set; }

    /// <summary>
    /// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? ScheduledAt { get; set; }

    /// <summary>
    /// Status of A/B Test for the campaign. abTesting = false means it is disabled, &amp; abTesting = true means it is enabled.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("abTesting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AbTesting { get; set; }

    /// <summary>
    /// Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectA { get; set; }

    /// <summary>
    /// Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectB { get; set; }

    /// <summary>
    /// The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? SplitRule { get; set; }

    /// <summary>
    /// Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string WinnerCriteria { get; set; }

    /// <summary>
    /// The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? WinnerDelay { get; set; }

    /// <summary>
    /// It is true if you have chosen to send your campaign at best time, otherwise it is false
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sendAtBestTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SendAtBestTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetExtendedCampaignOverview : GetCampaignOverview
{
    /// <summary>
    /// Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("testSent", Required = Newtonsoft.Json.Required.Always)]
    public bool TestSent { get; set; }

    /// <summary>
    /// Header of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Header { get; set; }

    /// <summary>
    /// Footer of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("footer", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Footer { get; set; }

    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Sender Sender { get; set; } = new Sender();

    /// <summary>
    /// Email defined as the "Reply to" of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// Customisation of the "to" field of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ToField { get; set; }

    /// <summary>
    /// HTML content of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Link to share the campaign on social medias
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shareLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShareLink { get; set; }

    /// <summary>
    /// Tag of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Tag { get; set; }

    /// <summary>
    /// Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ModifiedAt { get; set; }

    /// <summary>
    /// Status of inline image. inlineImageActivation = false means image can’t be embedded, &amp; inlineImageActivation = true means image can be embedded, in the email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("inlineImageActivation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? InlineImageActivation { get; set; }

    /// <summary>
    /// Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, &amp; mirrorActive = true means mirror links are activated, in the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mirrorActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MirrorActive { get; set; }

    /// <summary>
    /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, &amp; recurring = true means contact can receive the same Trigger campaign several times
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Recurring { get; set; }

    /// <summary>
    /// Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? SentDate { get; set; }

    /// <summary>
    /// Total number of non-delivered campaigns for a particular campaign id.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("returnBounce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ReturnBounce { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetCampaignRecipients
{
    [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> Lists { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    [Newtonsoft.Json.JsonProperty("exclusionLists", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> ExclusionLists { get; set; } = new System.Collections.ObjectModel.Collection<long>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetExtendedCampaignStats
{
    /// <summary>
    /// Overall statistics of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("globalStats", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GlobalStats GlobalStats { get; set; } = new GlobalStats();

    /// <summary>
    /// List-wise statistics of the campaign.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignStats", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<CampaignStats> CampaignStats { get; set; } = new System.Collections.ObjectModel.Collection<CampaignStats>();

    /// <summary>
    /// Number of clicks on mirror link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mirrorClick", Required = Newtonsoft.Json.Required.Always)]
    public long MirrorClick { get; set; }

    /// <summary>
    /// Number of remaning emails to send
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remaining", Required = Newtonsoft.Json.Required.Always)]
    public long Remaining { get; set; }

    /// <summary>
    /// Statistics about the number of clicks for the links
    /// </summary>
    [Newtonsoft.Json.JsonProperty("linksStats", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public object LinksStats { get; set; } = new object();

    [Newtonsoft.Json.JsonProperty("statsByDomain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetStatsByDomain StatsByDomain { get; set; } = new GetStatsByDomain();

    /// <summary>
    /// Statistics about the campaign on the basis of various devices
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statsByDevice", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetStatsByDevice StatsByDevice { get; set; } = new GetStatsByDevice();

    /// <summary>
    /// Statistics about the campaign on the basis of various browsers
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statsByBrowser", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetStatsByBrowser StatsByBrowser { get; set; } = new GetStatsByBrowser();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetStatsByDomain : Dictionary<string, GetCampaignStats>
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetStatsByDevice
{
    /// <summary>
    /// Statistics of the campaign on the basis of desktop devices
    /// </summary>
    [Newtonsoft.Json.JsonProperty("desktop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IDictionary<string, GetDeviceBrowserStats> Desktop { get; set; }

    /// <summary>
    /// Statistics of the campaign on the basis of mobile devices
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IDictionary<string, GetDeviceBrowserStats> Mobile { get; set; }

    /// <summary>
    /// Statistics of the campaign on the basis of tablet devices
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tablet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IDictionary<string, GetDeviceBrowserStats> Tablet { get; set; }

    /// <summary>
    /// Statistics of the campaign on the basis of unknown devices
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unknown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public IDictionary<string, GetDeviceBrowserStats> Unknown { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetStatsByBrowser : Dictionary<string, GetDeviceBrowserStats>
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AddContactToList
{
    /// <summary>
    /// Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(150)]
    public ICollection<string> Emails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RemoveContactFromList
{
    /// <summary>
    /// Required if 'all' is false. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.MinLength(1)]
    [System.ComponentModel.DataAnnotations.MaxLength(150)]
    public ICollection<string> Emails { get; set; }

    /// <summary>
    /// Required if 'emails' is empty. Remove all existing contacts from a list. A process will be created in this scenario. You can fetch the process details to know about the progress
    /// </summary>
    [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? All { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmsCampaignOverview
{
    /// <summary>
    /// ID of the SMS Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the SMS Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Status of the SMS Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetSmsCampaignOverviewStatus Status { get; set; }

    /// <summary>
    /// Content of the SMS Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    /// <summary>
    /// UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ScheduledAt { get; set; }

    /// <summary>
    /// Sender of the SMS Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Sender { get; set; }

    /// <summary>
    /// Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ModifiedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetWhatsappCampaignOverview
{
    /// <summary>
    /// ID of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CampaignName { get; set; }

    /// <summary>
    /// Status of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignStatus", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetWhatsappCampaignOverviewCampaignStatus CampaignStatus { get; set; }

    /// <summary>
    /// UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ScheduledAt { get; set; }

    /// <summary>
    /// Sender of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("senderNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string SenderNumber { get; set; }

    [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public WhatsappCampStats Stats { get; set; }

    [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public WhatsappCampTemplate Template { get; set; } = new WhatsappCampTemplate();

    /// <summary>
    /// Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CreatedAt { get; set; }

    /// <summary>
    /// UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ModifiedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class WhatsappCampStats
{
    [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.Always)]
    public int Sent { get; set; }

    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public int Delivered { get; set; }

    [Newtonsoft.Json.JsonProperty("read", Required = Newtonsoft.Json.Required.Always)]
    public int Read { get; set; }

    [Newtonsoft.Json.JsonProperty("unsubscribe", Required = Newtonsoft.Json.Required.Always)]
    public int Unsubscribe { get; set; }

    [Newtonsoft.Json.JsonProperty("notSent", Required = Newtonsoft.Json.Required.Always)]
    public int NotSent { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class WhatsappCampTemplate
{
    /// <summary>
    /// name of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// description of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Category { get; set; }

    /// <summary>
    /// language of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Language { get; set; }

    [Newtonsoft.Json.JsonProperty("contains_button", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Contains_button { get; set; }

    [Newtonsoft.Json.JsonProperty("display_header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Display_header { get; set; }

    /// <summary>
    /// type of header
    /// </summary>
    [Newtonsoft.Json.JsonProperty("header_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Header_type { get; set; }

    /// <summary>
    /// array of component item objects
    /// </summary>
    [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<ComponentItems> Components { get; set; }

    /// <summary>
    /// array of variables item object
    /// </summary>
    [Newtonsoft.Json.JsonProperty("header_variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<VariablesItems> Header_variables { get; set; }

    /// <summary>
    /// array of variables item variables
    /// </summary>
    [Newtonsoft.Json.JsonProperty("body_variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<VariablesItems> Body_variables { get; set; }

    [Newtonsoft.Json.JsonProperty("button_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Button_type { get; set; }

    [Newtonsoft.Json.JsonProperty("hide_footer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Hide_footer { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ComponentItems
{
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class VariablesItems
{
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Default { get; set; }

    [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Datatype { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class BodyVariablesItems
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetWATemplates
{
    [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Templates> Templates { get; set; } = new System.Collections.ObjectModel.Collection<Templates>();

    /// <summary>
    /// Number of whatsApp templates retrived
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetWhatsappCampaigns
{
    [Newtonsoft.Json.JsonProperty("campaigns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Campaigns3> Campaigns { get; set; }

    /// <summary>
    /// Number of WhatsApp campaigns retrived
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateModel
{
    /// <summary>
    /// ID of the object created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateUpdateContactModel
{
    /// <summary>
    /// ID of the contact when a new contact is created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateSenderModel
{
    /// <summary>
    /// ID of the Sender created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Status of SPF configuration for the sender (true = SPF not well configured, false = SPF well configured)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("spfError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SpfError { get; set; }

    /// <summary>
    /// Status of DKIM configuration for the sender (true = DKIM not well configured, false = DKIM well configured)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dkimError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DkimError { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateSmtpEmail
{
    /// <summary>
    /// Message ID of the transactional email sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string MessageId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendTemplateEmail
{
    /// <summary>
    /// Message ID of the template Email sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string MessageId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateReseller
{
    /// <summary>
    /// AuthKey of Reseller child created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("authKey", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string AuthKey { get; set; }

    /// <summary>
    /// Id of Reseller child created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendSms
{
    [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Reference { get; set; }

    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    public long MessageId { get; set; }

    /// <summary>
    /// Count of SMS's to send multiple text messages
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? SmsCount { get; set; }

    /// <summary>
    /// SMS credits used per text message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("usedCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public float? UsedCredits { get; set; }

    /// <summary>
    /// Remaining SMS credits of the user
    /// </summary>
    [Newtonsoft.Json.JsonProperty("remainingCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public float? RemainingCredits { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreatedProcessId
{
    /// <summary>
    /// Id of the process created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Always)]
    public long ProcessId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateUpdateFolder
{
    /// <summary>
    /// Name of the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class PostSendFailed
{
    /// <summary>
    /// Response code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    public long Code { get; set; }

    /// <summary>
    /// Response message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Message { get; set; }

    [Newtonsoft.Json.JsonProperty("unexistingEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> UnexistingEmails { get; set; }

    [Newtonsoft.Json.JsonProperty("withoutListEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> WithoutListEmails { get; set; }

    [Newtonsoft.Json.JsonProperty("blackListedEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> BlackListedEmails { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class PostSendSmsTestFailed
{
    /// <summary>
    /// Response code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
    public long Code { get; set; }

    /// <summary>
    /// Response message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Message { get; set; }

    [Newtonsoft.Json.JsonProperty("unexistingSms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> UnexistingSms { get; set; }

    [Newtonsoft.Json.JsonProperty("withoutListSms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> WithoutListSms { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class PostContactInfo
{
    [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Contacts Contacts { get; set; } = new Contacts();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetAggregatedReport
{
    /// <summary>
    /// Time frame of the report
    /// </summary>
    [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Range { get; set; }

    /// <summary>
    /// Number of requests for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Always)]
    public long Requests { get; set; }

    /// <summary>
    /// Number of delivered emails for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of hardbounces for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of softbounces for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of clicks for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clicks", Required = Newtonsoft.Json.Required.Always)]
    public long Clicks { get; set; }

    /// <summary>
    /// Number of unique clicks for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueClicks", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueClicks { get; set; }

    /// <summary>
    /// Number of openings for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("opens", Required = Newtonsoft.Json.Required.Always)]
    public long Opens { get; set; }

    /// <summary>
    /// Number of unique openings for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueOpens", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueOpens { get; set; }

    /// <summary>
    /// Number of complaint (spam report) for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("spamReports", Required = Newtonsoft.Json.Required.Always)]
    public long SpamReports { get; set; }

    /// <summary>
    /// Number of blocked contact emails for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.Always)]
    public long Blocked { get; set; }

    /// <summary>
    /// Number of invalid emails for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invalid", Required = Newtonsoft.Json.Required.Always)]
    public long Invalid { get; set; }

    /// <summary>
    /// Number of unsubscribed emails for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscribed", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscribed { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetTransacBlockedContacts
{
    /// <summary>
    /// Count of blocked or unsubscribed contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Count { get; set; }

    [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Contacts2> Contacts { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetReports
{
    [Newtonsoft.Json.JsonProperty("reports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Reports> Reports { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetEmailEventReport
{
    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Events> Events { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmsEventReport
{
    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Events2> Events { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmtpTemplateOverview
{
    /// <summary>
    /// ID of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Subject of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Subject { get; set; }

    /// <summary>
    /// Status of template (true=active, false=inactive)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Always)]
    public bool IsActive { get; set; }

    /// <summary>
    /// Status of test sending for the template (true=test email has been sent, false=test email has not been sent)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("testSent", Required = Newtonsoft.Json.Required.Always)]
    public bool TestSent { get; set; }

    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Sender2 Sender { get; set; } = new Sender2();

    /// <summary>
    /// Email defined as the "Reply to" for the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// Customisation of the "to" field for the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ToField { get; set; }

    /// <summary>
    /// Tag of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Tag { get; set; }

    /// <summary>
    /// HTML content of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ModifiedAt { get; set; }

    /// <summary>
    /// It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("doiTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DoiTemplate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmtpTemplates
{
    /// <summary>
    /// Count of transactional email templates
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Count { get; set; }

    [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<GetSmtpTemplateOverview> Templates { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetWebhook
{
    /// <summary>
    /// URL of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Url { get; set; }

    /// <summary>
    /// ID of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Description of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Description { get; set; }

    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<string> Events { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    /// <summary>
    /// Type of webhook (marketing or transac)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public GetWebhookType Type { get; set; }

    /// <summary>
    /// Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ModifiedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetWebhooks
{
    [Newtonsoft.Json.JsonProperty("webhooks", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Webhooks> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<Webhooks>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetContactDetails
{
    /// <summary>
    /// Email address of the contact for which you requested the details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// ID of the contact for which you requested the details
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailBlacklisted", Required = Newtonsoft.Json.Required.Always)]
    public bool EmailBlacklisted { get; set; }

    /// <summary>
    /// Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsBlacklisted", Required = Newtonsoft.Json.Required.Always)]
    public bool SmsBlacklisted { get; set; }

    /// <summary>
    /// Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    /// <summary>
    /// Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime ModifiedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> ListIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    [Newtonsoft.Json.JsonProperty("listUnsubscribed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListUnsubscribed { get; set; }

    /// <summary>
    /// Set of attributes of the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public object Attributes { get; set; } = new object();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetExtendedContactDetails : GetContactDetails
{
    /// <summary>
    /// Campaign statistics of the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Statistics6 Statistics { get; set; } = new Statistics6();

}

/// <summary>
/// Campaign Statistics for the contact
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetContactCampaignStats
{
    [Newtonsoft.Json.JsonProperty("messagesSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<MessagesSent> MessagesSent { get; set; }

    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<HardBounces> HardBounces { get; set; }

    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<SoftBounces> SoftBounces { get; set; }

    [Newtonsoft.Json.JsonProperty("complaints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Complaints> Complaints { get; set; }

    [Newtonsoft.Json.JsonProperty("unsubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Unsubscriptions Unsubscriptions { get; set; }

    [Newtonsoft.Json.JsonProperty("opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Opened> Opened { get; set; }

    [Newtonsoft.Json.JsonProperty("clicked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Clicked> Clicked { get; set; }

    [Newtonsoft.Json.JsonProperty("transacAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<TransacAttributes> TransacAttributes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetContacts
{
    [Newtonsoft.Json.JsonProperty("contacts", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Contacts3> Contacts { get; set; } = new System.Collections.ObjectModel.Collection<Contacts3>();

    /// <summary>
    /// Number of contacts
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetAttributes
{
    /// <summary>
    /// Listing of available contact attributes in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Attributes> Attributes { get; set; } = new System.Collections.ObjectModel.Collection<Attributes>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetFolders
{
    [Newtonsoft.Json.JsonProperty("folders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Folders> Folders { get; set; }

    /// <summary>
    /// Number of folders available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetFolder
{
    /// <summary>
    /// ID of the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Number of blacklisted contacts in the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalBlacklisted", Required = Newtonsoft.Json.Required.Always)]
    public long TotalBlacklisted { get; set; }

    /// <summary>
    /// Number of contacts in the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalSubscribers", Required = Newtonsoft.Json.Required.Always)]
    public long TotalSubscribers { get; set; }

    /// <summary>
    /// Number of unique contacts in the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueSubscribers", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueSubscribers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSegments
{
    /// <summary>
    /// Listing of all the segments available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<object> Segments { get; set; }

    /// <summary>
    /// Number of Segments in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetFolderLists
{
    [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Lists> Lists { get; set; } = new System.Collections.ObjectModel.Collection<Lists>();

    /// <summary>
    /// Number of lists in the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetLists
{
    /// <summary>
    /// Listing of all the lists available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Lists2> Lists { get; set; } = new System.Collections.ObjectModel.Collection<Lists2>();

    /// <summary>
    /// Number of lists in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetList
{
    /// <summary>
    /// ID of the list
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the list
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Number of blacklisted contacts in the list
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalBlacklisted", Required = Newtonsoft.Json.Required.Always)]
    public long TotalBlacklisted { get; set; }

    /// <summary>
    /// Number of contacts in the list
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalSubscribers", Required = Newtonsoft.Json.Required.Always)]
    public long TotalSubscribers { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetExtendedList : GetList
{
    /// <summary>
    /// ID of the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.Always)]
    public long FolderId { get; set; }

    /// <summary>
    /// Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime CreatedAt { get; set; }

    [Newtonsoft.Json.JsonProperty("campaignStats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<CampaignStats2> CampaignStats { get; set; }

    /// <summary>
    /// Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("dynamicList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DynamicList { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSmsCampaignStats
{
    /// <summary>
    /// Number of delivered SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of sent SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.Always)]
    public long Sent { get; set; }

    /// <summary>
    /// Number of processing SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("processing", Required = Newtonsoft.Json.Required.Always)]
    public long Processing { get; set; }

    /// <summary>
    /// Number of softbounced SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of hardbounced SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of unsubscription SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscriptions", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscriptions { get; set; }

    /// <summary>
    /// Number of replies to the SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("answered", Required = Newtonsoft.Json.Required.Always)]
    public long Answered { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetDeviceBrowserStats
{
    /// <summary>
    /// Number of total clicks for the campaign using the particular browser
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clickers", Required = Newtonsoft.Json.Required.Always)]
    public long Clickers { get; set; }

    /// <summary>
    /// Number of unique clicks for the campaign using the particular browser
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueClicks", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueClicks { get; set; }

    /// <summary>
    /// Number of openings for the campaign using the particular browser
    /// </summary>
    [Newtonsoft.Json.JsonProperty("viewed", Required = Newtonsoft.Json.Required.Always)]
    public long Viewed { get; set; }

    /// <summary>
    /// Number of unique openings for the campaign using the particular browser
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueViews", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueViews { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetCampaignStats
{
    /// <summary>
    /// List Id of email campaign (only in case of get email campaign(s)(not for global stats))
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ListId { get; set; }

    /// <summary>
    /// Number of unique clicks for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueClicks", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueClicks { get; set; }

    /// <summary>
    /// Number of total clicks for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clickers", Required = Newtonsoft.Json.Required.Always)]
    public long Clickers { get; set; }

    /// <summary>
    /// Number of complaints (Spam reports) for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("complaints", Required = Newtonsoft.Json.Required.Always)]
    public long Complaints { get; set; }

    /// <summary>
    /// Number of delivered emails for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of sent emails for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.Always)]
    public long Sent { get; set; }

    /// <summary>
    /// Number of softbounce for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of harbounce for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of unique openings for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueViews", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueViews { get; set; }

    /// <summary>
    /// Recipients without any privacy protection option enabled in their email client
    /// </summary>
    [Newtonsoft.Json.JsonProperty("trackableViews", Required = Newtonsoft.Json.Required.Always)]
    public long TrackableViews { get; set; }

    /// <summary>
    /// Number of unsubscription for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscriptions", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscriptions { get; set; }

    /// <summary>
    /// Number of openings for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("viewed", Required = Newtonsoft.Json.Required.Always)]
    public long Viewed { get; set; }

    /// <summary>
    /// Number of deferred emails for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("deferred", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Deferred { get; set; }

    /// <summary>
    /// Total number of non-delivered campaigns for a particular campaign id.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("returnBounce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ReturnBounce { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateSmtpTemplate
{
    /// <summary>
    /// Tag of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Sender3 Sender { get; set; }

    /// <summary>
    /// Name of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TemplateName { get; set; }

    /// <summary>
    /// Required if htmlUrl is empty. Body of the message (HTML must have more than 10 characters)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Required if htmlContent is empty. URL to the body of the email (HTML)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlUrl { get; set; }

    /// <summary>
    /// Subject of the email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Email on which campaign recipients will be able to reply to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToField { get; set; }

    /// <summary>
    /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttachmentUrl { get; set; }

    /// <summary>
    /// Status of the template. isActive = false means template is inactive, isActive = true means template is active
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsActive { get; set; }

}

/// <summary>
/// Status of the campaign
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateCampaignStatus
{
    /// <summary>
    /// Note:- replicateTemplate status will be available only for template type campaigns.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateCampaignStatusStatus? Status { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateSmtpTemplate
{
    /// <summary>
    /// Tag of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Sender4 Sender { get; set; } = new Sender4();

    /// <summary>
    /// Name of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TemplateName { get; set; }

    /// <summary>
    /// Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Url which contents the body of the email message. REQUIRED if htmlContent is empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlUrl { get; set; }

    /// <summary>
    /// Subject of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Subject { get; set; }

    /// <summary>
    /// Email on which campaign recipients will be able to reply to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToField { get; set; }

    /// <summary>
    /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttachmentUrl { get; set; }

    /// <summary>
    /// Status of template. isActive = true means template is active and isActive = false means template is inactive
    /// </summary>
    [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsActive { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateEmailCampaign
{
    /// <summary>
    /// Tag of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Sender5 Sender { get; set; } = new Sender5();

    /// <summary>
    /// Name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Mandatory if htmlUrl and templateId are empty. Body of the message (HTML)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Mandatory if htmlContent and templateId are empty. Url to the message (HTML)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlUrl { get; set; }

    /// <summary>
    /// Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status 'active'. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TemplateId { get; set; }

    /// <summary>
    /// Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? ScheduledAt { get; set; }

    /// <summary>
    /// Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Email on which the campaign recipients will be able to reply to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToField { get; set; }

    /// <summary>
    /// List ids to include/exclude from campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Recipients3 Recipients { get; set; }

    /// <summary>
    /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttachmentUrl { get; set; }

    /// <summary>
    /// Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts
    /// </summary>
    [Newtonsoft.Json.JsonProperty("inlineImageActivation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? InlineImageActivation { get; set; } = false;

    /// <summary>
    /// Use true to enable the mirror link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mirrorActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MirrorActive { get; set; }

    /// <summary>
    /// Footer of the email campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("footer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Footer { get; set; }

    /// <summary>
    /// Header of the email campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Header { get; set; }

    /// <summary>
    /// Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("utmCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UtmCampaign { get; set; }

    /// <summary>
    /// Pass the set of attributes to customize the type classic campaign. For example, {"FNAME":"Joe", "LNAME":"Doe"}. Only available if 'type' is 'classic'. It's considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' &amp; 'toField'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Params { get; set; }

    /// <summary>
    /// Set this to true if you want to send your campaign at best time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sendAtBestTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SendAtBestTime { get; set; } = false;

    /// <summary>
    /// Status of A/B Test. abTesting = false means it is disabled, &amp; abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' &amp; 'winnerDelay' will be considered when abTesting is set to true. 'subjectA' &amp; 'subjectB' are mandatory together &amp; 'subject' if passed is ignored. Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
    /// </summary>
    [Newtonsoft.Json.JsonProperty("abTesting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AbTesting { get; set; } = false;

    /// <summary>
    /// Subject A of the campaign. Mandatory if abTesting = true. subjectA &amp; subjectB should have unique value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectA { get; set; }

    /// <summary>
    /// Subject B of the campaign. Mandatory if abTesting = true. subjectA &amp; subjectB should have unique value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectB { get; set; }

    /// <summary>
    /// Add the size of your test groups. Mandatory if abTesting = true &amp; 'recipients' is passed. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 50D)]
    public long? SplitRule { get; set; }

    /// <summary>
    /// Choose the metrics that will determinate the winning version. Mandatory if 'splitRule' &gt;= 1 and &lt; 50. If splitRule = 50, 'winnerCriteria' is ignored if passed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateEmailCampaignWinnerCriteria? WinnerCriteria { get; set; }

    /// <summary>
    /// Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Mandatory if 'splitRule' &gt;= 1 and &lt; 50. If splitRule = 50, 'winnerDelay' is ignored if passed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 168D)]
    public long? WinnerDelay { get; set; }

    /// <summary>
    /// Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ipWarmupEnable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IpWarmupEnable { get; set; } = false;

    /// <summary>
    /// Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("initialQuota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? InitialQuota { get; set; }

    /// <summary>
    /// Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("increaseRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
    public long? IncreaseRate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateEmailCampaign
{
    /// <summary>
    /// Tag of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{"name":"xyz", "email":"example@abc.com"}` , `{"name":"xyz", "id":123}`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Sender6 Sender { get; set; }

    /// <summary>
    /// Name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Body of the message (HTML version). REQUIRED if htmlUrl is empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Url which contents the body of the email message. REQUIRED if htmlContent is empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlUrl { get; set; }

    /// <summary>
    /// UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? ScheduledAt { get; set; }

    /// <summary>
    /// Subject of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Email on which campaign recipients will be able to reply to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your SendinBlue account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization
    /// </summary>
    [Newtonsoft.Json.JsonProperty("toField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ToField { get; set; }

    /// <summary>
    /// List ids to include/exclude from campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Recipients4 Recipients { get; set; }

    /// <summary>
    /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttachmentUrl { get; set; }

    /// <summary>
    /// Status of inline image. inlineImageActivation = false means image can’t be embedded, &amp; inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("inlineImageActivation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? InlineImageActivation { get; set; } = false;

    /// <summary>
    /// Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, &amp; mirrorActive = true means mirror links are activated, in the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("mirrorActive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? MirrorActive { get; set; }

    /// <summary>
    /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, &amp; recurring = true means contact can receive the same Trigger campaign several times
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Recurring { get; set; } = false;

    /// <summary>
    /// Footer of the email campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("footer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Footer { get; set; }

    /// <summary>
    /// Header of the email campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Header { get; set; }

    /// <summary>
    /// Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("utmCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UtmCampaign { get; set; }

    /// <summary>
    /// Pass the set of attributes to customize the type 'classic' campaign. For example, {"FNAME":"Joe", "LNAME":"Doe"}. The 'params' field will get updated, only if the campaign is in New Template Language, else ignored. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' &amp; 'toField'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Params { get; set; }

    /// <summary>
    /// Set this to true if you want to send your campaign at best time. Note:- if true, warmup ip will be disabled.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sendAtBestTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SendAtBestTime { get; set; }

    /// <summary>
    /// Status of A/B Test. abTesting = false means it is disabled, &amp; abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' &amp; 'winnerDelay' will be considered if abTesting is set to true. 'subject' if passed is ignored.  Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
    /// </summary>
    [Newtonsoft.Json.JsonProperty("abTesting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AbTesting { get; set; } = false;

    /// <summary>
    /// Subject A of the campaign. Considered if abTesting = true. subjectA &amp; subjectB should have unique value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectA { get; set; }

    /// <summary>
    /// Subject B of the campaign. Considered if abTesting = true. subjectA &amp; subjectB should have unique value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subjectB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SubjectB { get; set; }

    /// <summary>
    /// Add the size of your test groups. Considered if abTesting = true. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
    /// </summary>
    [Newtonsoft.Json.JsonProperty("splitRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 50D)]
    public long? SplitRule { get; set; }

    /// <summary>
    /// Choose the metrics that will determinate the winning version. Considered if 'splitRule' &gt;= 1 and &lt; 50. If splitRule = 50, 'winnerCriteria' is ignored if passed or alreday exist in record
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public UpdateEmailCampaignWinnerCriteria? WinnerCriteria { get; set; }

    /// <summary>
    /// Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Considered if 'splitRule' &gt;= 1 and &lt; 50. If splitRule = 50, 'winnerDelay' is ignored if passed or alreday exist in record
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winnerDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 168D)]
    public long? WinnerDelay { get; set; }

    /// <summary>
    /// Available for dedicated ip clients. Set this to true if you wish to warm up your ip.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ipWarmupEnable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IpWarmupEnable { get; set; } = false;

    /// <summary>
    /// Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("initialQuota", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? InitialQuota { get; set; }

    /// <summary>
    /// Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("increaseRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
    public long? IncreaseRate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetSharedTemplateUrl
{
    /// <summary>
    /// A unique URL for the email campaign or transactional template. This URL can be shared with other Sendinblue users.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sharedUrl", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string SharedUrl { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AbTestCampaignResult
{
    /// <summary>
    /// Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winningVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AbTestCampaignResultWinningVersion? WinningVersion { get; set; }

    /// <summary>
    /// Criteria choosen for winning version (Open/Click)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winningCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AbTestCampaignResultWinningCriteria? WinningCriteria { get; set; }

    /// <summary>
    /// Subject Line of current winning version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winningSubjectLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string WinningSubjectLine { get; set; }

    /// <summary>
    /// Open rate for current winning version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("openRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OpenRate { get; set; }

    /// <summary>
    /// Click rate for current winning version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clickRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ClickRate { get; set; }

    /// <summary>
    /// Open/Click rate for the winner version
    /// </summary>
    [Newtonsoft.Json.JsonProperty("winningVersionRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string WinningVersionRate { get; set; }

    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Statistics7 Statistics { get; set; }

    [Newtonsoft.Json.JsonProperty("clickedLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ClickedLinks ClickedLinks { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class EmailExportRecipients
{
    /// <summary>
    /// Webhook called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notifyURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NotifyURL { get; set; }

    /// <summary>
    /// Type of recipients to export for a campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipientsType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public EmailExportRecipientsRecipientsType RecipientsType { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RequestSmsRecipientExport
{
    /// <summary>
    /// URL that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notifyURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NotifyURL { get; set; }

    /// <summary>
    /// Filter the recipients based on how they interacted with the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipientsType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public RequestSmsRecipientExportRecipientsType RecipientsType { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendReport
{
    /// <summary>
    /// Language of email content for campaign report sending.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SendReportLanguage? Language { get; set; } = SendReportLanguage.Fr;

    /// <summary>
    /// Custom attributes for the report email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Email Email { get; set; } = new Email();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UploadImageToGallery
{
    /// <summary>
    /// The absolute url of the image (no local file). Maximum allowed size for image is 2MB. Allowed extensions for images are - jpeg, jpg, png, bmp, gif.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ImageUrl { get; set; }

    /// <summary>
    /// Name of the image.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendSmtpEmail
{
    /// <summary>
    /// Mandatory if 'templateId' is not passed. Pass name (optional) and email of sender from which emails will be sent. For example, {"name":"Mary from MyShop", "email":"no-reply@myshop.com"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Sender7 Sender { get; set; }

    /// <summary>
    /// List of email addresses and names (optional) of the recipients. For example, [{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]
    /// </summary>
    [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<To> To { get; set; } = new System.Collections.ObjectModel.Collection<To>();

    /// <summary>
    /// List of email addresses and names (optional) of the recipients in bcc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("bcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Bcc> Bcc { get; set; }

    /// <summary>
    /// List of email addresses and names (optional) of the recipients in cc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("cc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Cc> Cc { get; set; }

    /// <summary>
    /// HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("htmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string HtmlContent { get; set; }

    /// <summary>
    /// Plain Text body of the message ( Ignored if 'templateId' is passed )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("textContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TextContent { get; set; }

    /// <summary>
    /// Subject of the message. Mandatory if 'templateId' is not passed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Email (required), along with name (optional), on which transactional mail recipients will be able to reply back. For example, {"email":"ann6533@example.com", "name":"Ann"}.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ReplyTo ReplyTo { get; set; }

    /// <summary>
    /// Pass the absolute URL (no local file) or the base64 content of the attachment along with the attachment name (Mandatory if attachment content is passed). For example, `[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg", "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example content", "name":"myAttachmentFromBase64.jpg"}]`. Allowed extensions for attachment file: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg and wmv ( If 'templateId' is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then 'attachment' is ignored )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Attachment> Attachment { get; set; }

    /// <summary>
    /// Pass the set of custom headers (not the standard headers) that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, `{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}`.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Headers { get; set; }

    /// <summary>
    /// Id of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TemplateId { get; set; }

    /// <summary>
    /// Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}. It's considered only if template is in New Template Language format.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Params { get; set; }

    /// <summary>
    /// Tag your emails to find them more easily
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Tags { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class DeleteHardbounces
{
    /// <summary>
    /// Starting date (YYYY-MM-DD) of the time period for deletion. The hardbounces occurred after this date will be deleted. Must be less than or equal to the endDate
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string StartDate { get; set; }

    /// <summary>
    /// Ending date (YYYY-MM-DD) of the time period for deletion. The hardbounces until this date will be deleted. Must be greater than or equal to the startDate
    /// </summary>
    [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EndDate { get; set; }

    /// <summary>
    /// Target a specific email address
    /// </summary>
    [Newtonsoft.Json.JsonProperty("contactEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ContactEmail { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateWebhook
{
    /// <summary>
    /// URL of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Url { get; set; }

    /// <summary>
    /// Description of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` &amp; `delivered`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Events3> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events3>();

    /// <summary>
    /// Type of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateWebhookType? Type { get; set; } = CreateWebhookType.Transactional;

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateWebhook
{
    /// <summary>
    /// URL of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Description of the webhook
    /// </summary>
    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description { get; set; }

    /// <summary>
    /// Events triggering the webhook. Possible values for Transactional type webhook – `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed` and possible values for Marketing type webhook – `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` and `delivered`
    /// </summary>
    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ICollection<Events4> Events { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateDoiContact
{
    /// <summary>
    /// Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {'FNAME':'Elly', 'LNAME':'Roger'}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Attributes { get; set; }

    /// <summary>
    /// Lists under user account where contact should be added
    /// </summary>
    [Newtonsoft.Json.JsonProperty("includeListIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> IncludeListIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    /// <summary>
    /// Lists under user account where contact should not be added
    /// </summary>
    [Newtonsoft.Json.JsonProperty("excludeListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ExcludeListIds { get; set; }

    /// <summary>
    /// Id of the Double opt-in (DOI) template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
    public long TemplateId { get; set; }

    /// <summary>
    /// URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("redirectionUrl", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string RedirectionUrl { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateContact
{
    /// <summary>
    /// Email address of the user. Mandatory if "SMS" field is not passed in "attributes" parameter. Mobile Number in "SMS" field should be passed with proper country code. For example {"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Pass the set of attributes and their values. These attributes must be present in your SendinBlue account. For eg. {"FNAME":"Elly", "LNAME":"Roger"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Attributes { get; set; }

    /// <summary>
    /// Set this field to blacklist the contact for emails (emailBlacklisted = true)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailBlacklisted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? EmailBlacklisted { get; set; }

    /// <summary>
    /// Set this field to blacklist the contact for SMS (smsBlacklisted = true)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsBlacklisted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SmsBlacklisted { get; set; }

    /// <summary>
    /// Ids of the lists to add the contact to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListIds { get; set; }

    /// <summary>
    /// Facilitate to update the existing contact in the same request (updateEnabled = true)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? UpdateEnabled { get; set; } = false;

    /// <summary>
    /// transactional email forbidden sender for contact. Use only for email Contact ( only available if updateEnabled = true )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smtpBlacklistSender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> SmtpBlacklistSender { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateContact
{
    /// <summary>
    /// Pass the set of attributes to be updated. These attributes must be present in your account. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, `{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}`. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in "SMS" field should be passed with proper country code. For example {"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Attributes { get; set; }

    /// <summary>
    /// Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailBlacklisted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? EmailBlacklisted { get; set; }

    /// <summary>
    /// Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsBlacklisted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SmsBlacklisted { get; set; }

    /// <summary>
    /// Ids of the lists to add the contact to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListIds { get; set; }

    /// <summary>
    /// Ids of the lists to remove the contact from
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unlinkListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> UnlinkListIds { get; set; }

    /// <summary>
    /// transactional email forbidden sender for contact. Use only for email Contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smtpBlacklistSender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> SmtpBlacklistSender { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateAttribute
{
    /// <summary>
    /// Value of the attribute. Use only if the attribute's category is 'calculated' or 'global'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    /// <summary>
    /// List of values and labels that the attribute can take. Use only if the attribute's category is "category". For example, [{"value":1, "label":"male"}, {"value":2, "label":"female"}]
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enumeration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Enumeration> Enumeration { get; set; }

    /// <summary>
    /// Type of the attribute. Use only if the attribute's category is 'normal', 'category' or 'transactional' ( type 'boolean' is only available if the category is 'normal' attribute, type 'id' is only available if the category is 'transactional' attribute &amp; type 'category' is only available if the category is 'category' attribute )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateAttributeType? Type { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateAttribute
{
    /// <summary>
    /// Value of the attribute to update. Use only if the attribute's category is 'calculated' or 'global'
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    /// <summary>
    /// List of the values and labels that the attribute can take. Use only if the attribute's category is "category". For example, [{"value":1, "label":"male"}, {"value":2, "label":"female"}]
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enumeration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Enumeration2> Enumeration { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateList
{
    /// <summary>
    /// Name of the list
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Id of the parent folder in which this list is to be created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.Always)]
    public long FolderId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateList
{
    /// <summary>
    /// Name of the list. Either of the two parameters (name, folderId) can be updated at a time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Id of the folder in which the list is to be moved. Either of the two parameters (name, folderId) can be updated at a time.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? FolderId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RequestContactExport
{
    /// <summary>
    /// List of all the attributes that you want to export. These attributes must be present in your contact database. For example, ['fname', 'lname', 'email'].
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exportAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> ExportAttributes { get; set; }

    /// <summary>
    /// This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {"blacklisted":true} will export all the blacklisted contacts.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("contactFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ContactFilter { get; set; }

    /// <summary>
    /// Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("customContactFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CustomContactFilter CustomContactFilter { get; set; }

    /// <summary>
    /// Webhook that will be called once the export process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notifyUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NotifyUrl { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class RequestContactImport
{
    /// <summary>
    /// Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fileUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileUrl { get; set; }

    /// <summary>
    /// Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("fileBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileBody { get; set; }

    /// <summary>
    /// Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListIds { get; set; }

    /// <summary>
    /// URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    /// </summary>
    [Newtonsoft.Json.JsonProperty("notifyUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NotifyUrl { get; set; }

    /// <summary>
    /// To create a new list and import the contacts into it, pass the listName and an optional folderId.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("newList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public NewList NewList { get; set; }

    /// <summary>
    /// To blacklist all the contacts for email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailBlacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? EmailBlacklist { get; set; } = false;

    /// <summary>
    /// To disable email notification
    /// </summary>
    [Newtonsoft.Json.JsonProperty("disableNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? DisableNotification { get; set; } = false;

    /// <summary>
    /// To blacklist all the contacts for sms
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsBlacklist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SmsBlacklist { get; set; } = false;

    /// <summary>
    /// To facilitate the choice to update the existing contacts
    /// </summary>
    [Newtonsoft.Json.JsonProperty("updateExistingContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? UpdateExistingContacts { get; set; } = true;

    /// <summary>
    /// To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, &amp; emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true )
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emptyContactsAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? EmptyContactsAttributes { get; set; } = false;

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CreateSmsCampaign
{
    /// <summary>
    /// Name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(15)]
    public string Sender { get; set; }

    /// <summary>
    /// Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Recipients5 Recipients { get; set; }

    /// <summary>
    /// UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? ScheduledAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UpdateSmsCampaign
{
    /// <summary>
    /// Name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.StringLength(15)]
    public string Sender { get; set; }

    /// <summary>
    /// Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Recipients6 Recipients { get; set; }

    /// <summary>
    /// UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DateTime? ScheduledAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendTransacSms
{
    /// <summary>
    /// Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sender", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [System.ComponentModel.DataAnnotations.StringLength(15)]
    public string Sender { get; set; }

    /// <summary>
    /// Mobile number to send SMS with the country code
    /// </summary>
    [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Recipient { get; set; }

    /// <summary>
    /// Content of the message. If more than 160 characters long, will be sent as multiple text messages
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    /// <summary>
    /// Type of the SMS. Marketing SMS messages are those sent typically with marketing content. Transactional SMS messages are sent to individuals and are triggered in response to some action, such as a sign-up, purchase, etc.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SendTransacSmsType? Type { get; set; } = SendTransacSmsType.Transactional;

    /// <summary>
    /// Tag of the message
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Webhook to call for each event triggered by the message (delivered etc.)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("webUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string WebUrl { get; set; }

    /// <summary>
    /// A recognizable prefix will ensure your audience knows who you are.**Mandatory for U.S. Carriers**.This will be added as your Brand Name before the message content and will be included in content,**Prefer to verify maximum length of 160 characters including this prefix to avoid multiple sending of same sms**.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("organisationPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OrganisationPrefix { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendTestEmail
{
    /// <summary>
    /// List of the email addresses of the recipients whom you wish to send the test mail. If left empty, the test mail will be sent to your entire test list.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> EmailTo { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendTestSms
{
    /// <summary>
    /// Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted
    /// </summary>
    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PhoneNumber { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetTransacAggregatedSmsReport
{
    /// <summary>
    /// Time frame of the report
    /// </summary>
    [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Range { get; set; }

    /// <summary>
    /// Number of requests for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Always)]
    public long Requests { get; set; }

    /// <summary>
    /// Number of delivered SMS for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of hardbounces for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of softbounces for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of blocked contact for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.Always)]
    public long Blocked { get; set; }

    /// <summary>
    /// Number of unsubscription for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscribed", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscribed { get; set; }

    /// <summary>
    /// Number of answered SMS for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replied", Required = Newtonsoft.Json.Required.Always)]
    public long Replied { get; set; }

    /// <summary>
    /// Number of accepted for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accepted", Required = Newtonsoft.Json.Required.Always)]
    public long Accepted { get; set; }

    /// <summary>
    /// Number of rejected for the timeframe
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rejected", Required = Newtonsoft.Json.Required.Always)]
    public long Rejected { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetTransacSmsReport
{
    [Newtonsoft.Json.JsonProperty("reports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Reports2> Reports { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetIp
{
    /// <summary>
    /// ID of the dedicated IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Dedicated IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Status of the IP (true=active, false=inactive)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
    public bool Active { get; set; }

    /// <summary>
    /// Domain associated to the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetIpsFromSender
{
    /// <summary>
    /// Dedicated IP(s) linked to a sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<GetIpFromSender> Ips { get; set; } = new System.Collections.ObjectModel.Collection<GetIpFromSender>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetIps
{
    /// <summary>
    /// Dedicated IP(s) available on your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<GetIp> Ips { get; set; } = new System.Collections.ObjectModel.Collection<GetIp>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetIpFromSender
{
    /// <summary>
    /// ID of the dedicated IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Dedicated IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Domain associated to the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

    /// <summary>
    /// Weight of the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    public long Weight { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ManageIp
{
    /// <summary>
    /// Dedicated ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SendEmail
{
    /// <summary>
    /// List of the email addresses of the recipients. For example, ['abc@example.com', 'asd@example.com'].
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailTo", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<string> EmailTo { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    /// <summary>
    /// List of the email addresses of the recipients in bcc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailBcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> EmailBcc { get; set; }

    /// <summary>
    /// List of the email addresses of the recipients in cc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailCc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> EmailCc { get; set; }

    /// <summary>
    /// Email address which shall be used by campaign recipients to reply back
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ReplyTo { get; set; }

    /// <summary>
    /// Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AttachmentUrl { get; set; }

    /// <summary>
    /// Pass the list of content (base64 encoded) and name of the attachment. For example, [{"content":"base64 encoded content 1", "name":"attcahment1"}, {"content":"base64 encoded content 2", "name":"attcahment2"}].
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Attachment2> Attachment { get; set; }

    /// <summary>
    /// Pass the set of headers that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example, {"Content-Type":"text/html", "charset":"iso-8859-1", "sender.ip":"1.2.3.4"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Headers { get; set; }

    /// <summary>
    /// Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Attributes { get; set; }

    /// <summary>
    /// Tag your emails to find them more easily
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Tags { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetTransacEmailContent
{
    /// <summary>
    /// Email address to which transactional email has been sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Subject of the sent email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Subject { get; set; }

    /// <summary>
    /// Id of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TemplateId { get; set; }

    /// <summary>
    /// Date on which transactional email was sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime Date { get; set; }

    /// <summary>
    /// Series of events which occurred on the transactional email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Events5> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events5>();

    /// <summary>
    /// Actual content of the transactional email that has been sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Body { get; set; }

    /// <summary>
    /// Count of the attachments that were sent in the email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("attachmentCount", Required = Newtonsoft.Json.Required.Always)]
    public long AttachmentCount { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetTransacEmailsList
{
    [Newtonsoft.Json.JsonProperty("transactionalEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<TransactionalEmails> TransactionalEmails { get; set; }

}

/// <summary>
/// Percentage of a particular event for both versions
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AbTestVersionStats
{
    /// <summary>
    /// percentage of an event for version A
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Version A", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Version_A { get; set; }

    /// <summary>
    /// percentage of an event for version B
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Version B", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Version_B { get; set; }

}

/// <summary>
/// Information on clicked links for a particular version
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AbTestVersionClicks : System.Collections.ObjectModel.Collection<Anonymous2>
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class BlockDomain
{
    /// <summary>
    /// name of the domain to be blocked
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

}

/// <summary>
/// list of blocked domains
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GetBlockedDomains
{
    /// <summary>
    /// List of all blocked domains
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domains", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<string> Domains { get; set; } = new System.Collections.ObjectModel.Collection<string>();

}

/// <summary>
/// Filter on the type of the campaigns
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Type
{

    [System.Runtime.Serialization.EnumMember(Value = @"classic")]
    Classic = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"trigger")]
    Trigger = 1,

}

/// <summary>
/// Filter on the status of the campaign
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Status
{

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"archive")]
    Archive = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"inProcess")]
    InProcess = 5,

}

/// <summary>
/// Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Statistics
{

    [System.Runtime.Serialization.EnumMember(Value = @"globalStats")]
    GlobalStats = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"linksStats")]
    LinksStats = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"statsByDomain")]
    StatsByDomain = 2,

}

/// <summary>
/// Filter on type of the statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Statistics2
{

    [System.Runtime.Serialization.EnumMember(Value = @"globalStats")]
    GlobalStats = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"linksStats")]
    LinksStats = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"statsByDomain")]
    StatsByDomain = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"statsByDevice")]
    StatsByDevice = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"statsByBrowser")]
    StatsByBrowser = 4,

}

/// <summary>
/// Filter the report for a specific event type
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Event
{

    [System.Runtime.Serialization.EnumMember(Value = @"bounces")]
    Bounces = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"spam")]
    Spam = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"requests")]
    Requests = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"opened")]
    Opened = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"clicks")]
    Clicks = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
    Invalid = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"deferred")]
    Deferred = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 11,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Category of the attribute
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AttributeCategory
{

    [System.Runtime.Serialization.EnumMember(Value = @"normal")]
    Normal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"category")]
    Category = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"calculated")]
    Calculated = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"global")]
    Global = 4,

}

/// <summary>
/// Category of the attribute
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AttributeCategory2
{

    [System.Runtime.Serialization.EnumMember(Value = @"category")]
    Category = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"calculated")]
    Calculated = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"global")]
    Global = 2,

}

/// <summary>
/// Category of the attribute
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AttributeCategory3
{

    [System.Runtime.Serialization.EnumMember(Value = @"normal")]
    Normal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"category")]
    Category = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"calculated")]
    Calculated = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"global")]
    Global = 4,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort2
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort3
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort4
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort5
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort6
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Status of campaign.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Status2
{

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"archive")]
    Archive = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"inProcess")]
    InProcess = 5,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort7
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Filter the report for specific events
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Event2
{

    [System.Runtime.Serialization.EnumMember(Value = @"bounces")]
    Bounces = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
    Accepted = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscription")]
    Unsubscription = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"replies")]
    Replies = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
    Rejected = 9,

}

/// <summary>
/// Sort the results in the ascending/descending order of record creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort8
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort9
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort10
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

/// <summary>
/// Filter on webhook type
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Type2
{

    [System.Runtime.Serialization.EnumMember(Value = @"marketing")]
    Marketing = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 1,

}

/// <summary>
/// Sort the results in the ascending/descending order of webhook creation
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Sort11
{

    [System.Runtime.Serialization.EnumMember(Value = @"asc")]
    Asc = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"desc")]
    Desc = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Anonymous : GetChildDomain
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Plan
{
    /// <summary>
    /// Displays the plan type of the user
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PlanType Type { get; set; }

    /// <summary>
    /// This is the type of the credit, "Send Limit" is one of the possible types of credit of a user. "Send Limit" implies the total number of emails you can send to the subscribers in your account.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("creditsType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PlanCreditsType CreditsType { get; set; }

    /// <summary>
    /// Remaining credits of the user
    /// </summary>
    [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Always)]
    public float Credits { get; set; }

    /// <summary>
    /// Date of the period from which the plan will start (only available for "subscription" and "reseller" plan type)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public DateTime? StartDate { get; set; }

    /// <summary>
    /// Date of the period from which the plan will end (only available for "subscription" and "reseller" plan type)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public DateTime? EndDate { get; set; }

    /// <summary>
    /// Only in case of reseller account. It implies the total number of child accounts you can add to your account.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? UserLimit { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Relay
{
    /// <summary>
    /// Status of your transactional email Account (true=Enabled, false=Disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
    public bool Enabled { get; set; }

    /// <summary>
    /// Data regarding the transactional email account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Data Data { get; set; } = new Data();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class MarketingAutomation
{
    /// <summary>
    /// Marketing Automation Tracker ID
    /// </summary>
    [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Key { get; set; }

    /// <summary>
    /// Status of Marketing Automation Plateform activation for your account (true=enabled, false=disabled)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
    public bool Enabled { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Children : GetChildInfo
{
    /// <summary>
    /// ID of the child
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Credits
{
    /// <summary>
    /// Email credits available for your child
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? EmailCredits { get; set; }

    /// <summary>
    /// SMS credits available for your child
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsCredits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? SmsCredits { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Statistics3
{
    /// <summary>
    /// Overall emails sent for the previous month
    /// </summary>
    [Newtonsoft.Json.JsonProperty("previousMonthTotalSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? PreviousMonthTotalSent { get; set; }

    /// <summary>
    /// Overall emails sent for current month
    /// </summary>
    [Newtonsoft.Json.JsonProperty("currentMonthTotalSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? CurrentMonthTotalSent { get; set; }

    /// <summary>
    /// Overall emails sent for since the account exists
    /// </summary>
    [Newtonsoft.Json.JsonProperty("totalSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TotalSent { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ApiKeys
{
    [Newtonsoft.Json.JsonProperty("v2", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<V2> V2 { get; set; } = new System.Collections.ObjectModel.Collection<V2>();

    [Newtonsoft.Json.JsonProperty("v3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<V3> V3 { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Address
{
    /// <summary>
    /// Street information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Street { get; set; }

    /// <summary>
    /// City information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string City { get; set; }

    /// <summary>
    /// Zip Code information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ZipCode { get; set; }

    /// <summary>
    /// Country information
    /// </summary>
    [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Country { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Senders
{
    /// <summary>
    /// Id of the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// From Name associated to the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// From Email associated to the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Status of sender (true=activated, false=deactivated)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
    public bool Active { get; set; }

    /// <summary>
    /// List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Ips3> Ips { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CreateChildLanguage
{

    [System.Runtime.Serialization.EnumMember(Value = @"fr")]
    Fr = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"es")]
    Es = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"pt")]
    Pt = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"it")]
    It = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"de")]
    De = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"en")]
    En = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Ips
{
    /// <summary>
    /// Dedicated IP available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Domain of the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

    /// <summary>
    /// Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 100D)]
    public long? Weight { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Ips2
{
    /// <summary>
    /// Dedicated IP available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Domain of the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

    /// <summary>
    /// Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [System.ComponentModel.DataAnnotations.Range(1D, 100D)]
    public long? Weight { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum ErrorModelCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"invalid_parameter")]
    Invalid_parameter = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"missing_parameter")]
    Missing_parameter = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"out_of_range")]
    Out_of_range = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"campaign_processing")]
    Campaign_processing = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"campaign_sent")]
    Campaign_sent = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"document_not_found")]
    Document_not_found = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller_permission_denied")]
    Reseller_permission_denied = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"not_enough_credits")]
    Not_enough_credits = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"permission_denied")]
    Permission_denied = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"duplicate_parameter")]
    Duplicate_parameter = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"duplicate_request")]
    Duplicate_request = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"method_not_allowed")]
    Method_not_allowed = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
    Unauthorized = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"account_under_validation")]
    Account_under_validation = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"not_acceptable")]
    Not_acceptable = 14,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Child
{
    /// <summary>
    /// SMS Credits remaining for child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.Always)]
    public double Sms { get; set; }

    /// <summary>
    /// Email Credits remaining for child account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    public double Email { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Reseller
{
    /// <summary>
    /// SMS Credits remaining for reseller account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.Always)]
    public double Sms { get; set; }

    /// <summary>
    /// Email Credits remaining for reseller account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    public double Email { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetProcessStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"in_process")]
    In_process = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"completed")]
    Completed = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Campaigns : GetExtendedCampaignOverview
{
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetCampaignRecipients Recipients { get; set; } = new GetCampaignRecipients();

    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetExtendedCampaignStats Statistics { get; set; } = new GetExtendedCampaignStats();

    /// <summary>
    /// Link to share the campaign on social medias
    /// </summary>
    [Newtonsoft.Json.JsonProperty("shareLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShareLink { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Campaigns2 : GetSmsCampaignOverview
{
    [Newtonsoft.Json.JsonProperty("recipients", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetCampaignRecipients Recipients { get; set; } = new GetCampaignRecipients();

    [Newtonsoft.Json.JsonProperty("statistics", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetSmsCampaignStats Statistics { get; set; } = new GetSmsCampaignStats();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients : GetCampaignRecipients
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Statistics4 : GetSmsCampaignStats
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients2 : GetCampaignRecipients
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Statistics5 : GetExtendedCampaignStats
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetCampaignOverviewType
{

    [System.Runtime.Serialization.EnumMember(Value = @"classic")]
    Classic = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"trigger")]
    Trigger = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetCampaignOverviewStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"archive")]
    Archive = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"in_process")]
    In_process = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender
{
    /// <summary>
    /// Sender name of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Sender email of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Sender id of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class GlobalStats : GetCampaignStats
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CampaignStats : GetCampaignStats
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetSmsCampaignOverviewStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"archive")]
    Archive = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"inProcess")]
    InProcess = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetWhatsappCampaignOverviewCampaignStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
    Scheduled = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"approved")]
    Approved = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"running")]
    Running = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
    Rejected = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 7,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Templates
{
    /// <summary>
    /// id of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Id { get; set; }

    /// <summary>
    /// Name of the WhatsApp template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Status of the WhatsApp template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Status { get; set; }

    /// <summary>
    /// Language in which template exists
    /// </summary>
    [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Language { get; set; }

    /// <summary>
    /// category of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Category { get; set; }

    /// <summary>
    /// Error reason in the template creation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorReason { get; set; }

    /// <summary>
    /// Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CreatedAt { get; set; }

    /// <summary>
    /// UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ModifiedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Campaigns3
{
    /// <summary>
    /// ID of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
    public long Id { get; set; }

    /// <summary>
    /// Name of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CampaignName { get; set; }

    /// <summary>
    /// Id of the WhatsApp template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string TemplateId { get; set; }

    /// <summary>
    /// Status of the WhatsApp Campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignStatus", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Campaigns3CampaignStatus CampaignStatus { get; set; }

    /// <summary>
    /// UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
    /// </summary>
    [Newtonsoft.Json.JsonProperty("scheduledAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ScheduledAt { get; set; }

    /// <summary>
    /// Error reason in the campaign creation
    /// </summary>
    [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ErrorReason { get; set; }

    /// <summary>
    /// Count of invalidated contacts
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invalidatedContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? InvalidatedContacts { get; set; }

    /// <summary>
    /// Read percentage of the the WhatsApp campaign created
    /// </summary>
    [Newtonsoft.Json.JsonProperty("readPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public float? ReadPercentage { get; set; }

    [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public WhatsappCampStats Stats { get; set; }

    /// <summary>
    /// Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string CreatedAt { get; set; }

    /// <summary>
    /// UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ModifiedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Contacts
{
    [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Success { get; set; }

    [Newtonsoft.Json.JsonProperty("failure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Failure { get; set; }

    /// <summary>
    /// Displays the count of total number of contacts removed from list when user opts for "all" option.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Total { get; set; }

    /// <summary>
    /// Id of the process created to remove contacts from list when user opts for "all" option.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("processId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ProcessId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Contacts2
{
    /// <summary>
    /// Email address of the blocked or unsubscribed contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Sender email address of the blocked or unsubscribed contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("senderEmail", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string SenderEmail { get; set; }

    /// <summary>
    /// Reason for blocking / unsubscribing
    /// </summary>
    [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public Reason Reason { get; set; } = new Reason();

    /// <summary>
    /// Date when the contact was blocked or unsubscribed on
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blockedAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime BlockedAt { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Reports
{
    /// <summary>
    /// Date of the statistics
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public DateTime Date { get; set; }

    /// <summary>
    /// Number of requests for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Always)]
    public long Requests { get; set; }

    /// <summary>
    /// Number of delivered emails for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of hardbounces for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of softbounces for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of clicks for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clicks", Required = Newtonsoft.Json.Required.Always)]
    public long Clicks { get; set; }

    /// <summary>
    /// Number of unique clicks for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueClicks", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueClicks { get; set; }

    /// <summary>
    /// Number of openings for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("opens", Required = Newtonsoft.Json.Required.Always)]
    public long Opens { get; set; }

    /// <summary>
    /// Number of unique openings for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uniqueOpens", Required = Newtonsoft.Json.Required.Always)]
    public long UniqueOpens { get; set; }

    /// <summary>
    /// Number of complaints (spam reports) for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("spamReports", Required = Newtonsoft.Json.Required.Always)]
    public long SpamReports { get; set; }

    /// <summary>
    /// Number of blocked emails for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.Always)]
    public long Blocked { get; set; }

    /// <summary>
    /// Number of invalid emails for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("invalid", Required = Newtonsoft.Json.Required.Always)]
    public long Invalid { get; set; }

    /// <summary>
    /// Number of unsubscribed emails for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscribed", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscribed { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Events
{
    /// <summary>
    /// Email address which generates the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// UTC date-time on which the event has been generated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime Date { get; set; }

    /// <summary>
    /// Subject of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subject { get; set; }

    /// <summary>
    /// Message ID which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string MessageId { get; set; }

    /// <summary>
    /// Event which occurred
    /// </summary>
    [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public EventsEvent Event { get; set; }

    /// <summary>
    /// Reason of bounce (only available if the event is hardbounce or softbounce)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Reason { get; set; }

    /// <summary>
    /// Tag of the email which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

    /// <summary>
    /// The link which is sent to the user (only available if the event is requests or opened or clicks)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Link { get; set; }

    /// <summary>
    /// Sender email from which the emails are sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string From { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Events2
{
    /// <summary>
    /// Phone number which has generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string PhoneNumber { get; set; }

    /// <summary>
    /// UTC date-time on which the event has been generated
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime Date { get; set; }

    /// <summary>
    /// Message ID which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string MessageId { get; set; }

    /// <summary>
    /// Event which occurred
    /// </summary>
    [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public Events2Event Event { get; set; }

    /// <summary>
    /// Reason of bounce (only available if the event is hardbounce or softbounce)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Reason { get; set; }

    [Newtonsoft.Json.JsonProperty("reply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Reply { get; set; }

    /// <summary>
    /// Tag of the SMS which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Tag { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender2
{
    /// <summary>
    /// From email for the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// From email for the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Sender id of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum GetWebhookType
{

    [System.Runtime.Serialization.EnumMember(Value = @"marketing")]
    Marketing = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"transac")]
    Transac = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Webhooks : GetWebhook
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Statistics6
{
    /// <summary>
    /// Listing of the sent campaign for the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messagesSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<MessagesSent2> MessagesSent { get; set; }

    /// <summary>
    /// Listing of the hardbounes generated by the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<HardBounces2> HardBounces { get; set; }

    /// <summary>
    /// Listing of the softbounes generated by the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<SoftBounces2> SoftBounces { get; set; }

    /// <summary>
    /// Listing of the complaints generated by the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("complaints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Complaints2> Complaints { get; set; }

    /// <summary>
    /// Listing of the unsubscription for the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public Unsubscriptions2 Unsubscriptions { get; set; }

    /// <summary>
    /// Listing of the openings generated by the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Opened2> Opened { get; set; }

    /// <summary>
    /// Listing of the clicks generated by the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clicked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Clicked2> Clicked { get; set; }

    /// <summary>
    /// Listing of the transactional attributes for the contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("transacAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<object> TransacAttributes { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class MessagesSent
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class HardBounces
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SoftBounces
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Complaints
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Unsubscriptions
{
    /// <summary>
    /// Contact has unsubscribed via the unsubscription link in the email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userUnsubscription", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<UserUnsubscription> UserUnsubscription { get; set; } = new System.Collections.ObjectModel.Collection<UserUnsubscription>();

    /// <summary>
    /// Contact has been unsubscribed from the administrator
    /// </summary>
    [Newtonsoft.Json.JsonProperty("adminUnsubscription", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<AdminUnsubscription> AdminUnsubscription { get; set; } = new System.Collections.ObjectModel.Collection<AdminUnsubscription>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Opened
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// Number of openings of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has opened the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Clicked
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Links> Links { get; set; } = new System.Collections.ObjectModel.Collection<Links>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class TransacAttributes
{
    /// <summary>
    /// Date of the order
    /// </summary>
    [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public DateTime OrderDate { get; set; }

    /// <summary>
    /// Price of the order
    /// </summary>
    [Newtonsoft.Json.JsonProperty("orderPrice", Required = Newtonsoft.Json.Required.Always)]
    public float OrderPrice { get; set; }

    /// <summary>
    /// ID of the order
    /// </summary>
    [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
    public long OrderId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Contacts3 : GetContactDetails
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Attributes
{
    /// <summary>
    /// Name of the attribute
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Category of the attribute
    /// </summary>
    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributesCategory Category { get; set; }

    /// <summary>
    /// Type of the attribute
    /// </summary>
    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AttributesType? Type { get; set; }

    /// <summary>
    /// Parameter only available for "category" type attributes.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("enumeration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<Enumeration3> Enumeration { get; set; }

    /// <summary>
    /// Calculated value formula
    /// </summary>
    [Newtonsoft.Json.JsonProperty("calculatedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CalculatedValue { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Folders : GetFolder
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Lists : GetList
{

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Lists2 : GetList
{
    /// <summary>
    /// ID of the folder
    /// </summary>
    [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.Always)]
    public long FolderId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CampaignStats2
{
    /// <summary>
    /// ID of the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public GetCampaignStats Stats { get; set; } = new GetCampaignStats();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender3
{
    /// <summary>
    /// Name of the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Email of the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum UpdateCampaignStatusStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"archive")]
    Archive = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"darchive")]
    Darchive = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"queued")]
    Queued = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"replicate")]
    Replicate = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"replicateTemplate")]
    ReplicateTemplate = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 7,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender4
{
    /// <summary>
    /// Name of the sender. If not passed, will be set to default
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Email of the sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Select the sender for the template on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender5
{
    /// <summary>
    /// Sender Name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Sender email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients3
{
    /// <summary>
    /// List ids to exclude from the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exclusionListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ExclusionListIds { get; set; }

    /// <summary>
    /// Mandatory if scheduledAt is not empty. List Ids to send the campaign to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListIds { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CreateEmailCampaignWinnerCriteria
{

    [System.Runtime.Serialization.EnumMember(Value = @"open")]
    Open = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"click")]
    Click = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender6
{
    /// <summary>
    /// Sender Name from which the campaign emails are sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Sender email from which the campaign emails are sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    /// <summary>
    /// Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? Id { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients4
{
    /// <summary>
    /// List ids which have to be excluded from a campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exclusionListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ExclusionListIds { get; set; }

    /// <summary>
    /// Lists Ids to send the campaign to. REQUIRED if already not present in campaign and scheduledAt is not empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ListIds { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum UpdateEmailCampaignWinnerCriteria
{

    [System.Runtime.Serialization.EnumMember(Value = @"open")]
    Open = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"click")]
    Click = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AbTestCampaignResultWinningVersion
{

    [System.Runtime.Serialization.EnumMember(Value = @"notAvailable")]
    NotAvailable = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"tie")]
    Tie = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"A")]
    A = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"B")]
    B = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AbTestCampaignResultWinningCriteria
{

    [System.Runtime.Serialization.EnumMember(Value = @"Open")]
    Open = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Click")]
    Click = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Statistics7
{
    [Newtonsoft.Json.JsonProperty("openers", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats Openers { get; set; } = new AbTestVersionStats();

    [Newtonsoft.Json.JsonProperty("clicks", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats Clicks { get; set; } = new AbTestVersionStats();

    [Newtonsoft.Json.JsonProperty("unsubscribed", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats Unsubscribed { get; set; } = new AbTestVersionStats();

    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats HardBounces { get; set; } = new AbTestVersionStats();

    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats SoftBounces { get; set; } = new AbTestVersionStats();

    [Newtonsoft.Json.JsonProperty("complaints", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionStats Complaints { get; set; } = new AbTestVersionStats();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ClickedLinks
{
    [Newtonsoft.Json.JsonProperty("Version A", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionClicks Version_A { get; set; } = new AbTestVersionClicks();

    [Newtonsoft.Json.JsonProperty("Version B", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public AbTestVersionClicks Version_B { get; set; } = new AbTestVersionClicks();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum EmailExportRecipientsRecipientsType
{

    [System.Runtime.Serialization.EnumMember(Value = @"all")]
    All = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"nonClickers")]
    NonClickers = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"nonOpeners")]
    NonOpeners = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"clickers")]
    Clickers = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"openers")]
    Openers = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 7,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum RequestSmsRecipientExportRecipientsType
{

    [System.Runtime.Serialization.EnumMember(Value = @"all")]
    All = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"answered")]
    Answered = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum SendReportLanguage
{

    [System.Runtime.Serialization.EnumMember(Value = @"fr")]
    Fr = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"es")]
    Es = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"pt")]
    Pt = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"it")]
    It = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"de")]
    De = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"en")]
    En = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Email
{
    /// <summary>
    /// Email addresses of the recipients
    /// </summary>
    [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<string> To { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    /// <summary>
    /// Custom text message to be presented in the report email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Body { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Sender7
{
    /// <summary>
    /// Name of the sender from which the emails will be sent. Maximum allowed characters are 70.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Email of the sender from which the emails will be sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class To
{
    /// <summary>
    /// Email address of the recipient
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Name of the recipient. Maximum allowed characters are 70.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Bcc
{
    /// <summary>
    /// Email address of the recipient in bcc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Name of the recipient in bcc. Maximum allowed characters are 70.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Cc
{
    /// <summary>
    /// Email address of the recipient in cc
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Name of the recipient in cc. Maximum allowed characters are 70.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class ReplyTo
{
    /// <summary>
    /// Email address in reply to
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Name in reply to. Maximum allowed characters are 70.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Attachment
{
    /// <summary>
    /// Absolute url of the attachment (no local file).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url { get; set; }

    /// <summary>
    /// Base64 encoded chunk data of the attachment generated on the fly
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public byte[] Content { get; set; }

    /// <summary>
    /// Required if content is passed. Name of the attachment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Events3
{

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounce")]
    HardBounce = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounce")]
    SoftBounce = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"spam")]
    Spam = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"request")]
    Request = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"click")]
    Click = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
    Invalid = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"deferred")]
    Deferred = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"opened")]
    Opened = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"uniqueOpened")]
    UniqueOpened = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"listAddition")]
    ListAddition = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"contactUpdated")]
    ContactUpdated = 14,

    [System.Runtime.Serialization.EnumMember(Value = @"contactDeleted")]
    ContactDeleted = 15,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CreateWebhookType
{

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"marketing")]
    Marketing = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Events4
{

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounce")]
    HardBounce = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounce")]
    SoftBounce = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"spam")]
    Spam = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"request")]
    Request = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"click")]
    Click = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
    Invalid = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"deferred")]
    Deferred = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"opened")]
    Opened = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"uniqueOpened")]
    UniqueOpened = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 11,

    [System.Runtime.Serialization.EnumMember(Value = @"listAddition")]
    ListAddition = 12,

    [System.Runtime.Serialization.EnumMember(Value = @"contactUpdated")]
    ContactUpdated = 13,

    [System.Runtime.Serialization.EnumMember(Value = @"contactDeleted")]
    ContactDeleted = 14,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Enumeration
{
    /// <summary>
    /// Id of the value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    public int Value { get; set; }

    /// <summary>
    /// Label of the value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Label { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CreateAttributeType
{

    [System.Runtime.Serialization.EnumMember(Value = @"text")]
    Text = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"date")]
    Date = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"float")]
    Float = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
    Boolean = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"id")]
    Id = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"category")]
    Category = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Enumeration2
{
    /// <summary>
    /// Id of the value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    public int Value { get; set; }

    /// <summary>
    /// Label of the value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Label { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class CustomContactFilter
{
    /// <summary>
    /// Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed &amp; unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("actionForContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomContactFilterActionForContacts? ActionForContacts { get; set; }

    /// <summary>
    /// Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers &amp; nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers &amp; nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces &amp; softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("actionForEmailCampaigns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomContactFilterActionForEmailCampaigns? ActionForEmailCampaigns { get; set; }

    /// <summary>
    /// Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces &amp; softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
    /// <br/>
    /// </summary>
    [Newtonsoft.Json.JsonProperty("actionForSmsCampaigns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CustomContactFilterActionForSmsCampaigns? ActionForSmsCampaigns { get; set; }

    /// <summary>
    /// Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? ListId { get; set; }

    /// <summary>
    /// Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("emailCampaignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? EmailCampaignId { get; set; }

    /// <summary>
    /// Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("smsCampaignId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? SmsCampaignId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class NewList
{
    /// <summary>
    /// List with listName will be created first and users will be imported in it (Mandatory if listIds is empty).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ListName { get; set; }

    /// <summary>
    /// Id of the folder where this new list shall be created (Mandatory if listName is not empty).
    /// </summary>
    [Newtonsoft.Json.JsonProperty("folderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? FolderId { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients5
{
    /// <summary>
    /// Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> ListIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    /// <summary>
    /// List ids which have to be excluded from a campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exclusionListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ExclusionListIds { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Recipients6
{
    /// <summary>
    /// Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty
    /// </summary>
    [Newtonsoft.Json.JsonProperty("listIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<long> ListIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

    /// <summary>
    /// List ids which have to be excluded from a campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("exclusionListIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<long> ExclusionListIds { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum SendTransacSmsType
{

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"marketing")]
    Marketing = 1,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Reports2
{
    /// <summary>
    /// Date for which statistics are retrieved
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public DateTime Date { get; set; }

    /// <summary>
    /// Number of requests for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Always)]
    public long Requests { get; set; }

    /// <summary>
    /// Number of delivered SMS for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("delivered", Required = Newtonsoft.Json.Required.Always)]
    public long Delivered { get; set; }

    /// <summary>
    /// Number of hardbounces for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("hardBounces", Required = Newtonsoft.Json.Required.Always)]
    public long HardBounces { get; set; }

    /// <summary>
    /// Number of softbounces for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("softBounces", Required = Newtonsoft.Json.Required.Always)]
    public long SoftBounces { get; set; }

    /// <summary>
    /// Number of blocked contact for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("blocked", Required = Newtonsoft.Json.Required.Always)]
    public long Blocked { get; set; }

    /// <summary>
    /// Number of unsubscription for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("unsubscribed", Required = Newtonsoft.Json.Required.Always)]
    public long Unsubscribed { get; set; }

    /// <summary>
    /// Number of answered SMS for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("replied", Required = Newtonsoft.Json.Required.Always)]
    public long Replied { get; set; }

    /// <summary>
    /// Number of accepted for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("accepted", Required = Newtonsoft.Json.Required.Always)]
    public long Accepted { get; set; }

    /// <summary>
    /// Number of rejected for the date
    /// </summary>
    [Newtonsoft.Json.JsonProperty("rejected", Required = Newtonsoft.Json.Required.Always)]
    public long Rejected { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Attachment2
{
    /// <summary>
    /// Base64 encoded chunk data of the attachment generated on the fly
    /// </summary>
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public byte[] Content { get; set; }

    /// <summary>
    /// Required for content. Name of the attachment
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Events5
{
    /// <summary>
    /// Name of the event that occurred on the sent email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Time at which the event occurred
    /// </summary>
    [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime Time { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class TransactionalEmails
{
    /// <summary>
    /// Email address to which transactional email has been sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Email { get; set; }

    /// <summary>
    /// Subject of the sent email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Subject { get; set; }

    /// <summary>
    /// Id of the template
    /// </summary>
    [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public long? TemplateId { get; set; }

    /// <summary>
    /// Message Id of the sent email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string MessageId { get; set; }

    /// <summary>
    /// Unique id of the email sent to a particular contact
    /// </summary>
    [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Uuid { get; set; }

    /// <summary>
    /// Date on which transactional email was sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime Date { get; set; }

    /// <summary>
    /// Email address of the sender from which the email was sent
    /// </summary>
    [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string From { get; set; }

    /// <summary>
    /// Tags used for your email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ICollection<string> Tags { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Anonymous2
{
    /// <summary>
    /// URL of the link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Link { get; set; }

    /// <summary>
    /// Number of times a link is clicked
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clicksCount", Required = Newtonsoft.Json.Required.Always)]
    public long ClicksCount { get; set; }

    /// <summary>
    /// Percentage of clicks of link with respect to total clicks
    /// </summary>
    [Newtonsoft.Json.JsonProperty("clickRate", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ClickRate { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum PlanType
{

    [System.Runtime.Serialization.EnumMember(Value = @"payAsYouGo")]
    PayAsYouGo = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"free")]
    Free = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"subscription")]
    Subscription = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"sms")]
    Sms = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"reseller")]
    Reseller = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum PlanCreditsType
{

    [System.Runtime.Serialization.EnumMember(Value = @"sendLimit")]
    SendLimit = 0,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Data
{
    /// <summary>
    /// Email to use as login on transactional platform
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string UserName { get; set; }

    /// <summary>
    /// URL of the SMTP Relay
    /// </summary>
    [Newtonsoft.Json.JsonProperty("relay", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Relay { get; set; }

    /// <summary>
    /// Port used for SMTP Relay
    /// </summary>
    [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
    public int Port { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class V2
{
    /// <summary>
    /// Name of the key for version 2
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// API Key for version 2
    /// </summary>
    [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Key { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class V3
{
    /// <summary>
    /// Name of the key for version 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// API Key for version 3
    /// </summary>
    [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Key { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Ips3
{
    /// <summary>
    /// Dedicated IP available in your account
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Domain of the IP
    /// </summary>
    [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Domain { get; set; }

    /// <summary>
    /// Weight of the IP for this sender
    /// </summary>
    [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
    public long Weight { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Campaigns3CampaignStatus
{

    [System.Runtime.Serialization.EnumMember(Value = @"draft")]
    Draft = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
    Scheduled = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"pending")]
    Pending = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"approved")]
    Approved = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"running")]
    Running = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"suspended")]
    Suspended = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
    Rejected = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 7,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Reason
{
    /// <summary>
    /// Reason code for blocking / unsubscribing (This code is safe for comparison)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ReasonCode? Code { get; set; }

    /// <summary>
    /// Reason for blocking / unsubscribing (This string is not safe for comparison)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Message { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum EventsEvent
{

    [System.Runtime.Serialization.EnumMember(Value = @"bounces")]
    Bounces = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"spam")]
    Spam = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"requests")]
    Requests = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"opened")]
    Opened = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"clicks")]
    Clicks = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
    Invalid = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"deferred")]
    Deferred = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 10,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 11,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum Events2Event
{

    [System.Runtime.Serialization.EnumMember(Value = @"bounces")]
    Bounces = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
    Delivered = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"sent")]
    Sent = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"accepted")]
    Accepted = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscription")]
    Unsubscription = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"replies")]
    Replies = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"blocked")]
    Blocked = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
    Rejected = 9,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class MessagesSent2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class HardBounces2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class SoftBounces2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Complaints2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Unsubscriptions2
{
    /// <summary>
    /// Contact unsubscribe via unsubscription link in a campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("userUnsubscription", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<UserUnsubscription2> UserUnsubscription { get; set; } = new System.Collections.ObjectModel.Collection<UserUnsubscription2>();

    /// <summary>
    /// Contact has been unsubscribed from the administrator
    /// </summary>
    [Newtonsoft.Json.JsonProperty("adminUnsubscription", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<AdminUnsubscription2> AdminUnsubscription { get; set; } = new System.Collections.ObjectModel.Collection<AdminUnsubscription2>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Opened2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// Number of openings for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has opened the email
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Clicked2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// Listing of the clicked links for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public ICollection<Links2> Links { get; set; } = new System.Collections.ObjectModel.Collection<Links2>();

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UserUnsubscription
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has unsubscribed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AdminUnsubscription
{
    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has been unsubscribed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Links
{
    /// <summary>
    /// Number of clicks on this link for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has clicked on the link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// URL of the clicked link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Url { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AttributesCategory
{

    [System.Runtime.Serialization.EnumMember(Value = @"normal")]
    Normal = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
    Transactional = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"category")]
    Category = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"calculated")]
    Calculated = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"global")]
    Global = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum AttributesType
{

    [System.Runtime.Serialization.EnumMember(Value = @"text")]
    Text = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"date")]
    Date = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"float")]
    Float = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"id")]
    Id = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"boolean")]
    Boolean = 4,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Enumeration3
{
    /// <summary>
    /// ID of Value of the "category" type attribute
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    public long Value { get; set; }

    /// <summary>
    /// Label of the "category" type attribute
    /// </summary>
    [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Label { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CustomContactFilterActionForContacts
{

    [System.Runtime.Serialization.EnumMember(Value = @"allContacts")]
    AllContacts = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"subscribed")]
    Subscribed = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribedPerList")]
    UnsubscribedPerList = 3,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CustomContactFilterActionForEmailCampaigns
{

    [System.Runtime.Serialization.EnumMember(Value = @"openers")]
    Openers = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"nonOpeners")]
    NonOpeners = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"clickers")]
    Clickers = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"nonClickers")]
    NonClickers = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 6,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum CustomContactFilterActionForSmsCampaigns
{

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounces")]
    HardBounces = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"softBounces")]
    SoftBounces = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribed")]
    Unsubscribed = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public enum ReasonCode
{

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribedViaMA")]
    UnsubscribedViaMA = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribedViaEmail")]
    UnsubscribedViaEmail = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"adminBlocked")]
    AdminBlocked = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"unsubscribedViaApi")]
    UnsubscribedViaApi = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"hardBounce")]
    HardBounce = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"contactFlaggedAsSpam")]
    ContactFlaggedAsSpam = 5,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class UserUnsubscription2
{
    /// <summary>
    /// ID of the campaign which generated the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("campaignId", Required = Newtonsoft.Json.Required.Always)]
    public long CampaignId { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has unsubscribed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class AdminUnsubscription2
{
    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has been unsubscribed
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Ip { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
public partial class Links2
{
    /// <summary>
    /// Number of clicks on this link for the campaign
    /// </summary>
    [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
    public long Count { get; set; }

    /// <summary>
    /// UTC date-time of the event
    /// </summary>
    [Newtonsoft.Json.JsonProperty("eventTime", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public DateTime EventTime { get; set; }

    /// <summary>
    /// IP from which the user has clicked on the link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Ip { get; set; }

    /// <summary>
    /// URL of the clicked link
    /// </summary>
    [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Url { get; set; }

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
{
    public DateFormatConverter()
    {
        DateTimeFormat = "yyyy-MM-dd";
    }
}



#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603